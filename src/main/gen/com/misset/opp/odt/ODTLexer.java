/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2020 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.misset.opp.odt;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.impl.source.tree.JavaDocElementType;
import com.intellij.psi.tree.IElementType;
import com.misset.opp.odt.psi.ODTIgnored;
import com.misset.opp.odt.psi.ODTTypes;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ODT.flex</tt>
 */
class ODTLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int FORCED_NAME = 2;
  public static final int PREFIX = 4;
  public static final int DEFINE = 6;
  public static final int DEFINE_PARAMS = 8;
  public static final int INTERPOLATION = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5
  };

    /**
     * Translates characters to character classes
     * Chosen bits are [9, 6, 6]
     * Total runtime size is 1696 bytes
     */
    public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch >> 12] | ((ch >> 6) & 0x3f)] << 6) | (ch & 0x3f)];
    }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
          "\1\0\1\100\1\200\u010d\100");

    /* The ZZ_CMAP_Y table has 192 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\2\4\172\3\1\5\77\3");

    /* The ZZ_CMAP_A table has 384 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\11\0\1\1\1\17\1\21\1\22\1\20\22\0\1\1\1\72\1\15\1\61\1\60\1\0\1\13\1\23\1" +
                    "\74\1\110\1\63\1\7\1\102\1\10\1\26\1\62\1\4\11\25\1\12\1\103\1\11\1\73\1\14" +
                    "\1\111\1\6\1\44\1\2\1\76\1\67\1\42\1\43\1\2\1\77\1\64\2\2\1\45\1\114\1\70" +
                    "\1\75\1\65\1\112\1\40\1\46\1\37\1\41\1\71\1\100\1\66\1\113\1\2\1\106\1\16" +
                    "\1\107\1\57\1\3\1\24\1\34\1\53\1\55\1\54\1\32\1\33\1\51\1\2\1\50\2\2\1\35" +
                    "\1\52\1\47\1\56\2\2\1\30\1\36\1\27\1\31\5\2\1\104\1\101\1\105\7\0\1\21\32" +
                    "\0\1\1\137\0\100\5\50\0\2\21\26\0");

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\6\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1" +
                    "\1\7\1\10\1\7\3\1\1\4\1\11\14\3\1\12" +
                    "\1\1\1\13\1\14\1\15\5\3\1\1\1\16\1\17" +
                    "\3\3\1\20\1\21\1\22\1\23\1\24\1\25\1\26" +
                    "\1\27\1\30\1\31\4\1\1\32\2\3\1\33\1\34" +
                    "\1\35\1\1\2\34\2\0\1\36\2\4\1\37\3\0" +
                    "\1\7\1\0\1\34\5\0\1\40\17\3\1\41\1\0" +
                    "\1\42\4\3\1\43\1\0\1\44\1\3\1\45\2\3" +
                    "\2\0\1\46\2\0\1\47\2\3\1\50\1\34\1\51" +
                    "\1\52\2\0\1\53\1\0\7\3\1\54\7\3\1\0" +
                    "\1\55\2\3\1\56\1\57\3\3\2\0\2\3\2\34" +
                    "\3\0\1\60\1\61\2\3\1\62\1\63\4\3\1\61" +
                    "\3\0\4\3\1\64\2\0\2\3\3\34\1\65\3\0" +
                    "\6\3\1\66\2\0\4\3\1\67\1\3\1\70\1\34" +
                    "\1\0\1\71\1\72\2\3\1\73\1\66\1\0\1\74" +
                    "\1\75\1\3\1\76\1\3\1\0\1\73\1\3\1\77" +
                    "\2\0\1\3\1\71\1\100";

    private static int[] zzUnpackAction() {
        int[] result = new int[237];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b" +
                    "\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\u03e9\0\u01ce\0\u0436" +
                    "\0\u0483\0\u04d0\0\u051d\0\u056a\0\u01ce\0\u05b7\0\u0604\0\u0651" +
                    "\0\u069e\0\u06eb\0\u0738\0\u0785\0\u07d2\0\u081f\0\u086c\0\u08b9" +
                    "\0\u0906\0\u01ce\0\u0953\0\u09a0\0\u09ed\0\u01ce\0\u0a3a\0\u0a87" +
                    "\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08\0\u01ce\0\u0c55\0\u0ca2" +
                    "\0\u0cef\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce" +
                    "\0\u01ce\0\u01ce\0\u0d3c\0\u0d89\0\u0dd6\0\u0e23\0\u0e70\0\u01ce" +
                    "\0\u0ebd\0\u0f0a\0\u01ce\0\u0f57\0\u01ce\0\u0fa4\0\u0ff1\0\u103e" +
                    "\0\u108b\0\u10d8\0\u01ce\0\u1125\0\u1172\0\u01ce\0\u11bf\0\u120c" +
                    "\0\u1259\0\u01ce\0\u0483\0\u12a6\0\u12f3\0\u04d0\0\u1340\0\u051d" +
                    "\0\u138d\0\u01ce\0\u13da\0\u1427\0\u1474\0\u14c1\0\u150e\0\u155b" +
                    "\0\u15a8\0\u15f5\0\u1642\0\u168f\0\u16dc\0\u1729\0\u1776\0\u17c3" +
                    "\0\u1810\0\u185d\0\u18aa\0\u0268\0\u18f7\0\u1944\0\u1991\0\u19de" +
                    "\0\u1a2b\0\u0bbb\0\u01ce\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac" +
                    "\0\u0dd6\0\u01ce\0\u1bf9\0\u1c46\0\u01ce\0\u1c93\0\u1ce0\0\u01ce" +
                    "\0\u1d2d\0\u108b\0\u01ce\0\u1d7a\0\u1dc7\0\u01ce\0\u1e14\0\u1e61" +
                    "\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f\0\u0268\0\u207c" +
                    "\0\u20c9\0\u2116\0\u2163\0\u21b0\0\u21fd\0\u224a\0\u2297\0\u22e4" +
                    "\0\u2331\0\u237e\0\u1ac5\0\u0268\0\u23cb\0\u2418\0\u2465\0\u22e4" +
                    "\0\u24b2\0\u24ff\0\u254c\0\u2599\0\u25e6\0\u2633\0\u2680\0\u26cd" +
                    "\0\u0268\0\u0268\0\u271a\0\u2767\0\u0268\0\u0268\0\u27b4\0\u2801" +
                    "\0\u284e\0\u289b\0\u28e8\0\u2935\0\u2982\0\u29cf\0\u2a1c\0\u2a69" +
                    "\0\u2ab6\0\u2b03\0\u0268\0\u2b50\0\u2b9d\0\u2bea\0\u2c37\0\u2c84" +
                    "\0\u2cd1\0\u2d1e\0\u01ce\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\u2e9f" +
                    "\0\u2eec\0\u2f39\0\u2f86\0\u2fd3\0\u01ce\0\u3020\0\u306d\0\u30ba" +
                    "\0\u3107\0\u3154\0\u31a1\0\u01ce\0\u31ee\0\u0268\0\u323b\0\u3288" +
                    "\0\u32d5\0\u0268\0\u3322\0\u336f\0\u01ce\0\u2982\0\u33bc\0\u0268" +
                    "\0\u0268\0\u3409\0\u0268\0\u3456\0\u34a3\0\u2297\0\u34f0\0\u0268" +
                    "\0\u353d\0\u358a\0\u35d7\0\u01ce\0\u0268";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[237];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\7\1\10\2\11\1\12\1\7\1\13\1\14\1\15" +
                    "\1\16\1\17\1\7\1\20\1\21\1\7\1\10\2\7" +
                    "\1\10\1\22\1\23\1\24\1\25\1\26\3\11\1\27" +
                    "\2\11\1\30\1\31\1\32\1\11\1\33\1\34\1\35" +
                    "\2\11\1\36\1\37\2\11\1\40\1\41\2\11\1\42" +
                    "\1\43\1\44\1\45\1\46\1\47\1\50\1\11\1\51" +
                    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\11" +
                    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70" +
                    "\1\71\1\72\3\11\1\7\1\10\3\73\12\7\1\10" +
                    "\2\7\1\10\2\7\1\73\1\7\30\73\2\7\1\44" +
                    "\1\74\1\7\6\73\3\7\4\73\11\7\3\73\1\7" +
                    "\1\10\1\75\6\7\1\76\1\17\4\7\1\10\2\7" +
                    "\1\10\4\7\30\75\2\7\1\44\1\74\1\7\6\75" +
                    "\3\7\4\75\11\7\3\75\1\7\1\10\3\11\12\7" +
                    "\1\10\2\7\1\10\2\7\1\11\1\7\30\11\2\7" +
                    "\1\44\1\74\1\7\6\11\1\7\1\77\1\100\1\11" +
                    "\1\101\2\11\11\7\1\102\2\11\1\7\1\10\15\7" +
                    "\1\10\2\7\1\10\35\7\1\43\1\44\1\74\17\7" +
                    "\1\63\5\7\1\103\4\7\24\104\1\105\33\104\1\106" +
                    "\1\107\1\110\32\104\116\0\1\10\15\0\1\10\2\0" +
                    "\1\10\74\0\5\11\1\0\1\11\14\0\1\11\1\0" +
                    "\30\11\5\0\6\11\3\0\4\11\11\0\3\11\2\0" +
                    "\5\11\1\0\1\11\14\0\1\11\1\111\30\11\5\0" +
                    "\6\11\3\0\4\11\11\0\3\11\64\0\1\112\123\0" +
                    "\1\113\25\0\1\114\20\0\1\115\45\0\1\116\23\0" +
                    "\1\117\1\120\1\117\2\0\2\121\2\0\1\121\11\0" +
                    "\1\117\1\121\30\117\2\0\3\121\6\117\1\0\1\122" +
                    "\1\0\4\117\10\0\1\121\3\117\73\0\1\122\21\0" +
                    "\15\123\1\124\1\125\76\123\16\126\1\127\4\126\1\124" +
                    "\71\126\16\130\1\131\5\130\1\132\70\130\2\0\2\11" +
                    "\1\24\2\11\1\0\1\11\14\0\1\24\1\111\30\11" +
                    "\5\0\6\11\3\0\4\11\11\0\3\11\2\0\5\11" +
                    "\1\0\1\11\14\0\1\11\1\0\1\11\1\133\17\11" +
                    "\1\134\6\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\5\11" +
                    "\1\135\22\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\1\136" +
                    "\27\11\5\0\6\11\3\0\4\11\11\0\3\11\2\0" +
                    "\5\11\1\0\1\11\14\0\1\11\1\0\1\11\1\133" +
                    "\7\11\1\137\16\11\5\0\6\11\3\0\4\11\11\0" +
                    "\3\11\2\0\5\11\1\0\1\11\14\0\1\11\1\0" +
                    "\13\11\1\140\14\11\5\0\6\11\3\0\4\11\11\0" +
                    "\3\11\2\0\5\11\1\0\1\11\14\0\1\11\1\0" +
                    "\16\11\1\141\11\11\5\0\4\11\1\142\1\11\3\0" +
                    "\4\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\5\11\1\135\7\11\1\143\12\11\5\0" +
                    "\6\11\3\0\4\11\11\0\3\11\2\0\5\11\1\0" +
                    "\1\11\14\0\1\11\1\0\30\11\5\0\4\11\1\144" +
                    "\1\11\3\0\4\11\11\0\3\11\2\0\5\11\1\0" +
                    "\1\11\14\0\1\11\1\0\2\11\1\145\25\11\5\0" +
                    "\6\11\3\0\4\11\11\0\3\11\2\0\5\11\1\0" +
                    "\1\11\14\0\1\11\1\0\20\11\1\146\7\11\5\0" +
                    "\6\11\3\0\4\11\11\0\3\11\2\0\5\11\1\0" +
                    "\1\11\14\0\1\11\1\0\27\11\1\147\5\0\6\11" +
                    "\3\0\4\11\11\0\3\11\2\0\5\11\1\0\1\11" +
                    "\14\0\1\11\1\0\3\11\1\150\1\11\1\151\22\11" +
                    "\5\0\6\11\3\0\4\11\11\0\3\11\2\0\3\152" +
                    "\20\0\1\152\1\0\30\152\5\0\6\152\3\0\4\152" +
                    "\11\0\3\152\17\44\2\0\74\44\62\0\1\44\1\153" +
                    "\33\0\5\11\1\0\1\11\14\0\1\11\1\0\14\11" +
                    "\1\154\13\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\11\11" +
                    "\1\155\16\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\13\11" +
                    "\1\156\14\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\30\11" +
                    "\5\0\6\11\3\0\1\157\3\11\11\0\3\11\2\0" +
                    "\5\11\1\0\1\11\14\0\1\11\1\0\15\11\1\160" +
                    "\12\11\5\0\6\11\3\0\4\11\11\0\3\11\2\0" +
                    "\3\161\20\0\1\161\1\0\30\161\5\0\6\161\1\162" +
                    "\2\0\4\161\11\0\3\161\14\0\1\163\56\0\1\122" +
                    "\23\0\5\11\1\0\1\11\14\0\1\11\1\0\10\11" +
                    "\1\164\1\165\16\11\5\0\6\11\3\0\4\11\11\0" +
                    "\3\11\2\0\5\11\1\0\1\11\14\0\1\11\1\0" +
                    "\30\11\5\0\6\11\3\0\2\11\1\166\1\11\11\0" +
                    "\3\11\2\0\5\11\1\0\1\11\14\0\1\11\1\0" +
                    "\30\11\5\0\6\11\3\0\2\11\1\167\1\11\11\0" +
                    "\3\11\2\0\5\73\1\0\1\73\14\0\1\73\1\0" +
                    "\30\73\5\0\6\73\3\0\4\73\11\0\3\73\62\0" +
                    "\1\44\1\170\33\0\1\171\1\0\1\171\5\0\1\172" +
                    "\12\0\1\171\1\0\30\171\5\0\6\171\3\0\4\171" +
                    "\11\0\3\171\2\173\1\174\1\173\1\174\7\173\1\7" +
                    "\10\173\1\174\1\173\30\174\5\173\6\174\3\173\4\174" +
                    "\11\173\3\174\14\0\1\175\102\0\5\11\1\0\1\11" +
                    "\14\0\1\11\1\0\30\11\5\0\6\11\3\0\1\176" +
                    "\3\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\12\11\1\177\15\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\24\104\1\0\33\104\1\0\34\104" +
                    "\104\0\1\200\10\0\17\107\2\104\3\107\1\44\33\107" +
                    "\1\44\34\107\24\104\1\0\33\104\1\0\1\104\1\107" +
                    "\1\201\31\104\4\0\1\202\20\0\1\202\132\0\1\203" +
                    "\77\0\1\111\72\0\1\115\20\0\1\115\1\111\70\0" +
                    "\1\117\1\120\1\117\2\120\1\204\1\117\1\0\1\205" +
                    "\1\121\1\206\10\0\1\117\1\204\30\117\2\0\3\121" +
                    "\6\117\3\0\4\117\10\0\1\121\3\117\2\0\5\120" +
                    "\1\121\1\120\2\0\1\121\1\206\10\0\1\120\1\121" +
                    "\30\120\2\0\3\121\6\120\3\0\4\120\10\0\1\121" +
                    "\3\120\2\0\3\120\2\0\2\121\2\0\1\121\1\206" +
                    "\10\0\1\120\1\121\30\120\2\0\3\121\6\120\3\0" +
                    "\4\120\10\0\1\121\3\120\57\0\1\207\35\0\17\123" +
                    "\4\0\72\123\17\126\4\0\72\126\17\130\4\0\72\130" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\2\11" +
                    "\1\210\25\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\23\11" +
                    "\1\211\4\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\6\11" +
                    "\1\212\21\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\1\11" +
                    "\1\213\26\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\12\11" +
                    "\1\214\15\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\10\11" +
                    "\1\215\17\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\17\11" +
                    "\1\216\10\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\30\11" +
                    "\5\0\3\11\1\217\2\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\16\11" +
                    "\1\220\11\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\30\11" +
                    "\5\0\3\11\1\165\2\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\6\11" +
                    "\1\221\14\11\1\222\4\11\5\0\6\11\3\0\4\11" +
                    "\11\0\3\11\2\0\5\11\1\0\1\11\14\0\1\11" +
                    "\1\0\1\223\27\11\5\0\6\11\3\0\4\11\11\0" +
                    "\3\11\2\0\5\11\1\0\1\11\14\0\1\11\1\0" +
                    "\27\11\1\224\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\26\11" +
                    "\1\225\1\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\1\226" +
                    "\27\11\5\0\6\11\3\0\4\11\11\0\3\11\2\0" +
                    "\5\152\1\0\1\152\14\0\1\152\1\0\30\152\5\0" +
                    "\6\152\3\0\4\152\11\0\3\152\63\227\1\230\31\227" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\13\11" +
                    "\1\231\14\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\14\11" +
                    "\1\232\13\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\10\11" +
                    "\1\233\17\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\11\11" +
                    "\1\234\16\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\161\1\0\1\161\14\0\1\161\1\0\30\161" +
                    "\5\0\6\161\3\0\4\161\11\0\3\161\2\0\5\11" +
                    "\1\0\1\11\14\0\1\11\1\0\30\11\5\0\6\11" +
                    "\3\0\2\11\1\235\1\11\11\0\3\11\2\0\5\11" +
                    "\1\0\1\11\14\0\1\11\1\0\30\11\5\0\6\11" +
                    "\2\0\1\172\4\11\11\0\3\11\2\0\5\11\1\0" +
                    "\1\11\14\0\1\11\1\0\30\11\5\0\6\11\3\0" +
                    "\1\236\3\11\11\0\3\11\2\0\5\11\1\0\1\11" +
                    "\14\0\1\11\1\0\13\11\1\237\14\11\5\0\6\11" +
                    "\3\0\4\11\11\0\3\11\63\227\1\240\31\227\14\173" +
                    "\1\7\102\173\1\174\1\173\1\174\2\173\2\174\1\173" +
                    "\1\241\1\173\1\7\10\173\32\174\5\173\6\174\3\173" +
                    "\4\174\11\173\3\174\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\30\11\5\0\6\11\3\0\4\11\11\0" +
                    "\2\11\1\242\2\0\5\11\1\0\1\11\14\0\1\11" +
                    "\1\0\13\11\1\243\14\11\5\0\6\11\3\0\4\11" +
                    "\11\0\3\11\24\244\1\227\33\244\1\227\2\244\1\245" +
                    "\31\244\2\0\1\117\1\120\1\117\2\0\2\204\1\0" +
                    "\1\205\1\121\1\206\10\0\1\117\1\204\30\117\2\0" +
                    "\3\121\6\117\3\0\4\117\10\0\1\121\3\117\2\0" +
                    "\3\246\2\0\2\247\2\0\1\247\11\0\1\246\1\247" +
                    "\30\246\2\0\3\247\6\246\3\0\4\246\10\0\1\247" +
                    "\3\246\57\0\1\250\37\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\3\11\1\251\24\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\3\11\1\252\24\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\7\11\1\210\20\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\21\11\1\253\6\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\13\11\1\251\14\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\12\11\1\254\15\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\13\11\1\255\14\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\17\11\1\214\10\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\6\11\1\256\21\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\24\11\1\257\3\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\3\11\1\260\24\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\6\11\1\261\21\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\21\11\1\262\6\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\3\11\1\263\24\11\5\0\6\11\3\0" +
                    "\4\11\11\0\3\11\63\227\1\264\31\227\63\265\1\266" +
                    "\31\265\2\0\5\11\1\0\1\11\14\0\1\11\1\0" +
                    "\14\11\1\267\13\11\5\0\6\11\3\0\4\11\11\0" +
                    "\3\11\2\0\5\11\1\0\1\11\14\0\1\11\1\0" +
                    "\30\11\5\0\1\270\5\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\13\11" +
                    "\1\271\14\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\30\11" +
                    "\5\0\6\11\3\0\1\272\3\11\11\0\3\11\2\0" +
                    "\5\11\1\0\1\11\14\0\1\11\1\0\30\11\5\0" +
                    "\4\11\1\273\1\11\3\0\4\11\11\0\3\11\2\173" +
                    "\3\274\2\173\2\275\2\173\1\275\1\7\10\173\1\274" +
                    "\1\275\30\274\2\173\3\275\6\274\3\173\4\274\10\173" +
                    "\1\275\3\274\2\0\5\11\1\0\1\11\14\0\1\11" +
                    "\1\0\30\11\5\0\6\11\3\0\4\11\11\0\2\11" +
                    "\1\276\2\0\5\11\1\0\1\11\14\0\1\11\1\0" +
                    "\11\11\1\277\16\11\5\0\6\11\3\0\4\11\11\0" +
                    "\3\11\24\244\1\227\33\244\1\227\2\244\1\300\31\244" +
                    "\24\301\1\265\33\301\1\265\2\301\1\302\31\301\2\0" +
                    "\5\246\1\247\1\246\2\0\1\247\1\303\10\0\1\246" +
                    "\1\247\30\246\2\0\3\247\6\246\3\0\4\246\10\0" +
                    "\1\247\3\246\2\0\3\246\2\0\2\247\2\0\1\247" +
                    "\1\303\10\0\1\246\1\247\30\246\2\0\3\247\6\246" +
                    "\3\0\4\246\10\0\1\247\3\246\2\0\1\304\6\0" +
                    "\1\305\1\306\14\0\30\304\5\0\6\304\3\0\4\304" +
                    "\11\0\3\304\2\0\5\11\1\0\1\11\14\0\1\11" +
                    "\1\0\20\11\1\307\7\11\5\0\6\11\3\0\4\11" +
                    "\11\0\3\11\2\0\5\11\1\0\1\11\14\0\1\11" +
                    "\1\0\11\11\1\310\16\11\5\0\6\11\3\0\4\11" +
                    "\11\0\3\11\2\0\5\11\1\0\1\11\14\0\1\11" +
                    "\1\0\3\11\1\311\24\11\5\0\6\11\3\0\4\11" +
                    "\11\0\3\11\2\0\5\11\1\0\1\11\14\0\1\11" +
                    "\1\0\22\11\1\257\5\11\5\0\6\11\3\0\4\11" +
                    "\11\0\3\11\2\0\5\11\1\0\1\11\14\0\1\11" +
                    "\1\0\3\11\1\312\24\11\5\0\6\11\3\0\4\11" +
                    "\11\0\3\11\2\0\5\11\1\0\1\11\14\0\1\11" +
                    "\1\0\23\11\1\313\4\11\5\0\6\11\3\0\4\11" +
                    "\11\0\3\11\2\0\5\11\1\0\1\11\14\0\1\11" +
                    "\1\0\10\11\1\314\17\11\5\0\6\11\3\0\4\11" +
                    "\11\0\3\11\62\227\1\315\32\227\63\265\1\316\113\265" +
                    "\1\227\1\317\31\265\2\0\5\11\1\0\1\11\14\0" +
                    "\1\11\1\0\30\11\5\0\1\320\5\11\3\0\4\11" +
                    "\11\0\3\11\2\0\5\11\1\0\1\11\14\0\1\11" +
                    "\1\0\30\11\5\0\4\11\1\321\1\11\3\0\4\11" +
                    "\11\0\3\11\2\0\5\11\1\0\1\11\14\0\1\11" +
                    "\1\0\11\11\1\322\16\11\5\0\6\11\3\0\4\11" +
                    "\11\0\3\11\2\0\5\11\1\0\1\11\14\0\1\11" +
                    "\1\0\17\11\1\323\10\11\5\0\6\11\3\0\4\11" +
                    "\11\0\3\11\2\173\5\274\1\275\1\274\2\173\1\275" +
                    "\1\324\10\173\1\274\1\275\30\274\2\173\3\275\6\274" +
                    "\3\173\4\274\10\173\1\275\3\274\2\173\3\274\2\173" +
                    "\2\275\2\173\1\275\1\324\10\173\1\274\1\275\30\274" +
                    "\2\173\3\275\6\274\3\173\4\274\10\173\1\275\3\274" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\15\11" +
                    "\1\325\12\11\5\0\6\11\3\0\4\11\11\0\3\11" +
                    "\2\0\5\11\1\0\1\11\14\0\1\11\1\0\30\11" +
                    "\5\0\6\11\3\0\4\11\11\0\1\11\1\326\1\11" +
                    "\24\244\1\227\33\244\1\227\1\244\1\104\32\244\24\301" +
                    "\1\265\33\301\1\265\2\301\1\327\55\301\1\265\33\301" +
                    "\1\265\1\301\1\244\1\245\31\301\2\0\1\304\1\0" +
                    "\1\304\5\0\1\306\12\0\1\304\1\0\30\304\5\0" +
                    "\6\304\3\0\4\304\11\0\3\304\2\0\1\330\1\0" +
                    "\1\330\20\0\1\330\1\0\30\330\5\0\6\330\3\0" +
                    "\4\330\11\0\3\330\2\0\3\331\20\0\1\331\1\0" +
                    "\30\331\5\0\6\331\3\0\4\331\11\0\3\331\2\0" +
                    "\5\11\1\0\1\11\14\0\1\11\1\0\22\11\1\252" +
                    "\5\11\5\0\6\11\3\0\4\11\11\0\3\11\2\0" +
                    "\5\11\1\0\1\11\14\0\1\11\1\0\30\11\5\0" +
                    "\4\11\1\332\1\11\3\0\4\11\11\0\3\11\2\0" +
                    "\5\11\1\0\1\11\14\0\1\11\1\0\1\11\1\252" +
                    "\26\11\5\0\6\11\3\0\4\11\11\0\3\11\2\0" +
                    "\5\11\1\0\1\11\14\0\1\11\1\0\5\11\1\333" +
                    "\22\11\5\0\6\11\3\0\4\11\11\0\3\11\2\0" +
                    "\5\11\1\0\1\11\14\0\1\11\1\0\5\11\1\334" +
                    "\22\11\5\0\6\11\3\0\4\11\11\0\3\11\2\0" +
                    "\5\11\1\0\1\11\14\0\1\11\1\0\21\11\1\134" +
                    "\6\11\5\0\6\11\3\0\4\11\11\0\3\11\62\265" +
                    "\1\335\114\265\1\336\1\337\31\265\2\0\5\11\1\0" +
                    "\1\11\14\0\1\11\1\0\30\11\5\0\2\11\1\340" +
                    "\3\11\3\0\4\11\11\0\3\11\2\0\5\11\1\0" +
                    "\1\11\14\0\1\11\1\0\13\11\1\341\14\11\5\0" +
                    "\6\11\3\0\4\11\11\0\3\11\2\0\5\11\1\0" +
                    "\1\11\14\0\1\11\1\0\30\11\5\0\6\11\3\0" +
                    "\3\11\1\342\11\0\3\11\2\0\5\11\1\0\1\11" +
                    "\14\0\1\11\1\0\13\11\1\343\14\11\5\0\6\11" +
                    "\3\0\4\11\11\0\3\11\2\0\5\11\1\0\1\11" +
                    "\14\0\1\11\1\0\30\11\5\0\4\11\1\344\1\11" +
                    "\3\0\4\11\11\0\3\11\24\301\1\265\33\301\1\265" +
                    "\1\301\1\104\32\301\2\0\1\330\1\0\1\330\2\0" +
                    "\2\330\1\0\1\345\12\0\32\330\5\0\6\330\3\0" +
                    "\4\330\11\0\3\330\2\0\5\331\1\0\1\331\14\0" +
                    "\1\331\1\0\30\331\5\0\6\331\3\0\4\331\11\0" +
                    "\3\331\2\0\5\11\1\0\1\11\14\0\1\11\1\0" +
                    "\20\11\1\252\7\11\5\0\6\11\3\0\4\11\11\0" +
                    "\3\11\2\0\5\11\1\0\1\11\14\0\1\11\1\0" +
                    "\6\11\1\252\21\11\5\0\6\11\3\0\4\11\11\0" +
                    "\3\11\62\265\1\346\1\317\31\265\2\0\5\11\1\0" +
                    "\1\11\14\0\1\11\1\0\30\11\5\0\1\347\5\11" +
                    "\3\0\4\11\11\0\3\11\2\0\5\11\1\0\1\11" +
                    "\14\0\1\11\1\0\30\11\5\0\3\11\1\350\2\11" +
                    "\3\0\4\11\11\0\3\11\2\0\3\351\2\0\2\352" +
                    "\2\0\1\352\11\0\1\351\1\352\30\351\2\0\3\352" +
                    "\6\351\3\0\4\351\10\0\1\352\3\351\2\0\5\11" +
                    "\1\0\1\11\14\0\1\11\1\0\17\11\1\353\10\11" +
                    "\5\0\6\11\3\0\4\11\11\0\3\11\2\0\5\351" +
                    "\1\352\1\351\2\0\1\352\1\354\10\0\1\351\1\352" +
                    "\30\351\2\0\3\352\6\351\3\0\4\351\10\0\1\352" +
                    "\3\351\2\0\3\351\2\0\2\352\2\0\1\352\1\354" +
                    "\10\0\1\351\1\352\30\351\2\0\3\352\6\351\3\0" +
                    "\4\351\10\0\1\352\3\351\2\0\5\11\1\0\1\11" +
                    "\14\0\1\11\1\0\13\11\1\355\14\11\5\0\6\11" +
                    "\3\0\4\11\11\0\3\11";

    private static int[] zzUnpackTrans() {
        int[] result = new int[13860];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\6\0\1\11\7\1\1\11\5\1\1\11\14\1\1\11" +
                    "\3\1\1\11\7\1\1\11\3\1\11\11\5\1\1\11" +
                    "\2\1\1\11\1\1\1\11\3\1\2\0\1\11\2\1" +
                    "\1\11\3\0\1\11\1\0\1\1\5\0\1\11\20\1" +
                    "\1\0\6\1\1\0\1\11\4\1\2\0\1\11\2\0" +
                    "\1\11\2\1\1\11\2\1\1\11\2\0\1\11\1\0" +
                    "\17\1\1\0\10\1\2\0\4\1\3\0\13\1\3\0" +
                    "\5\1\2\0\5\1\1\11\3\0\6\1\1\11\2\0" +
                    "\4\1\1\11\3\1\1\0\4\1\1\11\1\1\1\0" +
                    "\5\1\1\0\3\1\2\0\1\1\1\11\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[237];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    boolean inInterpolation = false;

    void enterInterpolation() {
        inInterpolation = true;
        yybegin(INTERPOLATION);
    }

    void leaveInterpolation() {
        inInterpolation = false;
        yybegin(YYINITIAL);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    ODTLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead + pos);
  }


    /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
        message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

      throw new Error(message);
  }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
      if (!zzEOFDone) {
          zzEOFDone = true;

      }
  }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return TokenType.BAD_CHARACTER;
                    }
                    // fall through
                    case 65:
                        break;
                    case 2: {
                        return TokenType.WHITE_SPACE;
                    }
                    // fall through
                    case 66:
                        break;
                    case 3: {
                        return ODTTypes.SYMBOL;
                    }
                    // fall through
                    case 67:
                        break;
                    case 4: {
                        return ODTTypes.INTEGER;
                    }
                    // fall through
                    case 68:
                        break;
                    case 5: {
                        return ODTTypes.AT;
                    }
                    // fall through
                    case 69:
                        break;
                    case 6: {
                        return ODTTypes.PLUS;
                    }
                    // fall through
                    case 70:
                        break;
                    case 7: {
                        return ODTTypes.CONDITIONAL_OPERATOR;
                    }
                    // fall through
                    case 71:
                        break;
                    case 8: {
                        return ODTTypes.COLON;
                    }
                    // fall through
                    case 72:
                        break;
                    case 9: {
                        return ODTTypes.DOT;
                    }
                    // fall through
                    case 73:
                        break;
                    case 10: {
                        return ODTTypes.CARET;
                    }
                    // fall through
                    case 74:
                        break;
                    case 11: {
                        return ODTIgnored.END_OF_LINE_COMMENT;
                    }
                    // fall through
                    case 75:
                        break;
                    case 12: {
                        return ODTTypes.FORWARD_SLASH;
                    }
                    // fall through
                    case 76:
                        break;
                    case 13: {
                        return ODTTypes.ASTERIX;
                    }
                    // fall through
                    case 77:
                        break;
                    case 14: {
                        return ODTTypes.EQUALS;
                    }
                    // fall through
                    case 78:
                        break;
                    case 15: {
                        return ODTTypes.PARENTHESES_OPEN;
                    }
                    // fall through
                    case 79:
                        break;
                    case 16: {
                        return ODTTypes.PIPE;
                    }
                    // fall through
                    case 80:
                        break;
                    case 17: {
                        return ODTTypes.COMMA;
                    }
                    // fall through
                    case 81:
                        break;
                    case 18: {
                        return ODTTypes.SEMICOLON;
                    }
                    // fall through
                    case 82:
                        break;
                    case 19: {
                        return ODTTypes.CURLY_OPEN;
                    }
                    // fall through
                    case 83:
                        break;
                    case 20: {
                        if (inInterpolation) {
                            enterInterpolation();
                            return ODTTypes.INTERPOLATION_END;
                        }
                        return ODTTypes.CURLY_CLOSED;
                    }
                    // fall through
                    case 84:
                        break;
                    case 21: {
                        return ODTTypes.BRACKET_OPEN;
                    }
                    // fall through
                    case 85:
                        break;
                    case 22: {
                        return ODTTypes.BRACKET_CLOSED;
                    }
                    // fall through
                    case 86:
                        break;
                    case 23: {
                        return ODTTypes.PARENTHESES_CLOSE;
                    }
                    // fall through
                    case 87:
                        break;
                    case 24: {
                        return ODTTypes.QUESTION_MARK;
                    }
                    // fall through
                    case 88:
                        break;
                    case 25: {
                        yybegin(YYINITIAL);
                        return ODTTypes.SYMBOL;
                    }
                    // fall through
                    case 89:
                        break;
                    case 26: {
                        yybegin(DEFINE_PARAMS);
                        return ODTTypes.PARENTHESES_OPEN;
                    }
                    // fall through
                    case 90:
                        break;
                    case 27: {
                        yybegin(DEFINE);
                        return ODTTypes.PARENTHESES_CLOSE;
                    }
                    // fall through
                    case 91:
                        break;
                    case 28: {
                        return ODTTypes.STRING;
                    }
                    // fall through
                    case 92:
                        break;
                    case 29: {
                        leaveInterpolation();
                        return ODTTypes.INTERPOLATED_STRING_END;
                    }
                    // fall through
                    case 93:
                        break;
                    case 30: {
                        return ODTTypes.ADD;
                    }
                    // fall through
                    case 94:
                        break;
                    case 31: {
                        return ODTTypes.REMOVE;
                    }
                    // fall through
                    case 95:
                        break;
                    case 32: {
                        yypushback(yylength() - 1); // pushback all but the opening backtick
                        enterInterpolation();
                        return ODTTypes.INTERPOLATED_STRING_START;
                    }
                    // fall through
                    case 96:
                        break;
                    case 33: {
                        return ODTTypes.VARIABLE_NAME;
                    }
                    // fall through
                    case 97:
                        break;
                    case 34: {
                        return ODTTypes.IF_OPERATOR;
                    }
                    // fall through
                    case 98:
                        break;
                    case 35: {
                        return ODTTypes.TAG;
                    }
                    // fall through
                    case 99:
                        break;
                    case 36: {
                        return ODTTypes.LAMBDA;
                    }
                    // fall through
                    case 100:
                        break;
                    case 37: {
                        return ODTTypes.BOOLEAN_OPERATOR;
                    }
                    // fall through
                    case 101:
                        break;
                    case 38: {
                        yypushback(1);
                        return ODTTypes.SYMBOL;
                    }
                    // fall through
                    case 102:
                        break;
                    case 39: {
                        yybegin(YYINITIAL);
                        return ODTTypes.LAMBDA;
                    }
                    // fall through
                    case 103:
                        break;
                    case 40: {
                        yybegin(YYINITIAL);
                        return ODTTypes.INTERPOLATION_START;
                    }
                    // fall through
                    case 104:
                        break;
                    case 41: {
                        return ODTTypes.DECIMAL;
                    }
                    // fall through
                    case 105:
                        break;
                    case 42: {
                        yypushback(yylength() - 1);
                        yybegin(FORCED_NAME);
                        return ODTTypes.AT;
                    }
                    // fall through
                    case 106:
                        break;
                    case 43: {
                        return ODTTypes.SCHEMALESS_IRI;
                    }
                    // fall through
                    case 107:
                        break;
                    case 44: {
                        return ODTTypes.END_OPERATOR;
                    }
                    // fall through
                    case 108:
                        break;
                    case 45: {
                        return ODTIgnored.DOC_COMMENT_START;
                    }
                    // fall through
                    case 109:
                        break;
                    case 46: {
                        return ODTTypes.NOT_OPERATOR;
                    }
                    // fall through
                    case 110:
                        break;
                    case 47: {
                        return ODTTypes.DECLARE_VAR;
                    }
                    // fall through
                    case 111:
                        break;
                    case 48: {
                        return ODTTypes.BOOLEAN;
                    }
                    // fall through
                    case 112:
                        break;
                    case 49: {
                        return ODTTypes.PRIMITIVE;
                    }
                    // fall through
                    case 113:
                        break;
                    case 50: {
                        return ODTTypes.ELSE_OPERATOR;
                    }
                    // fall through
                    case 114:
                        break;
                    case 51: {
                        return ODTTypes.NULL;
                    }
                    // fall through
                    case 115:
                        break;
                    case 52: {
                        return ODTTypes.WHEN_OPERATOR;
                    }
                    // fall through
                    case 116:
                        break;
                    case 53: {
                        return ODTTypes.IRI;
                    }
                    // fall through
                    case 117:
                        break;
                    case 54: {
                        return ODTIgnored.MULTILINE; // can be an indent/dedent token or JAVADOCS_START
                    }
                    // fall through
                    case 118:
                        break;
                    case 55: {
                        yybegin(YYINITIAL);
                        return ODTTypes.IRI;
                    }
                    // fall through
                    case 119:
                        break;
                    case 56: {
                        return ODTTypes.DEFINE_QUERY;
                    }
                    // fall through
                    case 120:
                        break;
                    case 57: {
                        return ODTTypes.TYPED_VALUE;
                    }
                    // fall through
                    case 121:
                        break;
                    case 58: {
                        return ODTTypes.RETURN_OPERATOR;
                    }
                    // fall through
                    case 122:
                        break;
                    case 59: {
                        return JavaDocElementType.DOC_COMMENT; // can be an indent/dedent token or JAVADOCS_START
                    }
                    // fall through
                    case 123:
                        break;
                    case 60: {
                        yybegin(PREFIX);
                        return ODTTypes.PREFIX_DEFINE_START;
                    }
                    // fall through
                    case 124:
                        break;
                    case 61: {
                        yybegin(DEFINE);
                        return ODTTypes.DEFINE_START;
                    }
                    // fall through
                    case 125:
                        break;
                    case 62: {
                        return ODTTypes.CHOOSE_OPERATOR;
                    }
                    // fall through
                    case 126:
                        break;
                    case 63: {
                        return ODTTypes.DEFINE_COMMAND;
                    }
                    // fall through
                    case 127:
                        break;
                    case 64: {
                        return ODTTypes.OTHERWISE_OPERATOR;
                    }
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
