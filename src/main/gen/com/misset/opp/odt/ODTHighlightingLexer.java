/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2020 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.misset.opp.odt;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.impl.source.tree.JavaDocElementType;
import com.intellij.psi.tree.IElementType;
import com.misset.opp.odt.psi.ODTIgnored;
import com.misset.opp.odt.psi.ODTTypes;
import com.misset.opp.odt.syntax.ODTHighlightingTypes;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ODT_Highlighting.flex</tt>
 */
class ODTHighlightingLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMAND_CALLNAME = 2;
  public static final int PREFIX = 4;
  public static final int DEFINE = 6;
  public static final int DEFINE_PARAMS = 8;
  public static final int INTERPOLATION = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5
  };

  /**
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1696 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch >> 12] | ((ch >> 6) & 0x3f)] << 6) | (ch & 0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
          "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
          "\1\0\1\1\1\2\1\3\2\4\172\3\1\5\77\3");

  /* The ZZ_CMAP_A table has 384 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
          "\11\0\1\1\1\17\1\21\1\22\1\20\22\0\1\1\1\72\1\15\1\61\1\60\1\0\1\13\1\23\1" +
                  "\107\1\110\1\63\1\7\1\101\1\10\1\26\1\62\1\4\11\25\1\12\1\102\1\11\1\73\1" +
                  "\14\1\111\1\6\1\44\1\2\1\75\1\67\1\42\1\43\1\2\1\76\1\64\2\2\1\45\1\114\1" +
                  "\70\1\74\1\65\1\112\1\40\1\46\1\37\1\41\1\71\1\77\1\66\1\113\1\2\1\105\1\16" +
                  "\1\106\1\57\1\3\1\24\1\34\1\53\1\55\1\54\1\32\1\33\1\51\1\2\1\50\2\2\1\35" +
                  "\1\52\1\47\1\56\2\2\1\30\1\36\1\27\1\31\5\2\1\103\1\100\1\104\7\0\1\21\32" +
                  "\0\1\1\137\0\100\5\50\0\2\21\26\0");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\6\0\1\1\1\2\2\3\1\4\1\5\1\6\1\1" +
                  "\1\6\1\7\3\1\1\4\1\10\14\3\1\11\1\1" +
                  "\1\12\1\13\1\14\5\3\1\1\1\6\3\3\1\15" +
                  "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                  "\1\26\1\27\1\1\2\30\1\1\1\7\1\31\1\1" +
                  "\1\31\1\32\1\31\1\33\1\34\1\35\1\1\2\34" +
                  "\2\0\1\36\1\6\2\4\3\0\1\37\1\0\1\34" +
                  "\5\0\1\40\16\3\1\41\1\0\1\42\4\3\1\43" +
                  "\1\0\1\44\3\3\1\0\1\45\2\0\1\46\2\31" +
                  "\1\47\1\34\1\4\2\0\1\50\1\0\16\3\1\0" +
                  "\1\51\5\3\2\0\2\31\2\34\3\0\1\52\1\53" +
                  "\2\3\1\54\4\3\1\53\3\0\3\3\2\0\2\31" +
                  "\3\34\1\55\3\0\5\3\1\56\2\0\3\3\1\57" +
                  "\1\31\1\42\1\34\1\0\1\60\2\3\1\61\1\56" +
                  "\1\0\1\62\1\63\1\3\1\31\1\0\1\61\2\0" +
                  "\1\60";

  private static int[] zzUnpackAction() {
    int[] result = new int[222];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b" +
                  "\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\u03e9\0\u0436\0\u0483" +
                  "\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u01ce\0\u0604\0\u0651\0\u069e" +
                  "\0\u06eb\0\u0738\0\u0785\0\u07d2\0\u081f\0\u086c\0\u08b9\0\u0906" +
                  "\0\u0953\0\u01ce\0\u09a0\0\u09ed\0\u0a3a\0\u01ce\0\u0a87\0\u0ad4" +
                  "\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c" +
                  "\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce" +
                  "\0\u01ce\0\u01ce\0\u0d89\0\u0dd6\0\u0e23\0\u0e70\0\u0ebd\0\u01ce" +
                  "\0\u0f0a\0\u0f57\0\u0fa4\0\u01ce\0\u0ff1\0\u01ce\0\u103e\0\u01ce" +
                  "\0\u108b\0\u10d8\0\u1125\0\u0483\0\u1172\0\u11bf\0\u01ce\0\u120c" +
                  "\0\u1259\0\u12a6\0\u12f3\0\u1340\0\u138d\0\u04d0\0\u13da\0\u1427" +
                  "\0\u051d\0\u1474\0\u056a\0\u14c1\0\u01ce\0\u150e\0\u155b\0\u15a8" +
                  "\0\u15f5\0\u1642\0\u168f\0\u16dc\0\u1729\0\u1776\0\u17c3\0\u1810" +
                  "\0\u185d\0\u18aa\0\u18f7\0\u1944\0\u1991\0\u0268\0\u19de\0\u1a2b" +
                  "\0\u1a78\0\u1ac5\0\u1b12\0\u0c08\0\u01ce\0\u1b5f\0\u1bac\0\u1bf9" +
                  "\0\u1c46\0\u01ce\0\u1c93\0\u1ce0\0\u01ce\0\u1d2d\0\u1d7a\0\u01ce" +
                  "\0\u1dc7\0\u1172\0\u1e14\0\u1e61\0\u01ce\0\u1eae\0\u1efb\0\u1f48" +
                  "\0\u1f95\0\u1fe2\0\u202f\0\u207c\0\u20c9\0\u2116\0\u2163\0\u21b0" +
                  "\0\u21fd\0\u224a\0\u2297\0\u22e4\0\u2331\0\u237e\0\u23cb\0\u2418" +
                  "\0\u2465\0\u24b2\0\u24ff\0\u237e\0\u254c\0\u2599\0\u25e6\0\u2633" +
                  "\0\u2680\0\u26cd\0\u271a\0\u2767\0\u0268\0\u0268\0\u27b4\0\u2801" +
                  "\0\u0268\0\u284e\0\u289b\0\u28e8\0\u2935\0\u2982\0\u29cf\0\u2a1c" +
                  "\0\u2a69\0\u2ab6\0\u2b03\0\u2b50\0\u2b9d\0\u2bea\0\u2c37\0\u2c84" +
                  "\0\u2cd1\0\u2d1e\0\u2d6b\0\u01ce\0\u2db8\0\u2e05\0\u2e52\0\u2e9f" +
                  "\0\u2eec\0\u2f39\0\u2f86\0\u2fd3\0\u01ce\0\u3020\0\u306d\0\u30ba" +
                  "\0\u3107\0\u3154\0\u01ce\0\u31a1\0\u0f0a\0\u31ee\0\u323b\0\u3288" +
                  "\0\u32d5\0\u3322\0\u01ce\0\u2a1c\0\u336f\0\u0268\0\u0268\0\u33bc" +
                  "\0\u3409\0\u3456\0\u2331\0\u34a3\0\u34f0\0\u01ce";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[222];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\7\1\10\1\11\1\12\1\13\1\7\1\14\1\15" +
                  "\1\16\1\17\1\20\1\7\1\15\1\21\1\7\1\10" +
                  "\2\7\1\10\1\22\1\23\1\24\1\25\1\26\3\11" +
                  "\1\27\2\11\1\30\1\31\1\32\1\11\1\33\1\34" +
                  "\1\35\2\11\1\36\1\37\2\11\1\40\1\41\2\11" +
                  "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\11" +
                  "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\11" +
                  "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67" +
                  "\1\70\1\71\1\72\3\11\1\7\1\10\3\73\12\7" +
                  "\1\10\2\7\1\10\2\7\1\73\1\7\30\73\2\7" +
                  "\1\44\1\74\1\7\6\73\2\7\4\73\12\7\3\73" +
                  "\1\7\1\10\1\75\2\76\4\7\1\77\1\100\4\7" +
                  "\1\10\2\7\1\10\2\7\1\76\1\7\30\75\2\7" +
                  "\1\44\1\74\1\7\6\75\2\7\4\75\12\7\3\75" +
                  "\1\7\1\10\3\101\12\7\1\10\2\7\1\10\2\7" +
                  "\1\101\1\7\30\101\2\7\1\44\1\74\1\7\6\101" +
                  "\1\7\1\102\1\101\1\103\2\101\7\7\1\104\2\7" +
                  "\1\105\2\101\1\7\1\10\15\7\1\10\2\7\1\10" +
                  "\35\7\1\43\1\44\1\74\16\7\1\62\6\7\1\106" +
                  "\4\7\24\107\1\110\33\107\1\111\1\112\1\113\32\107" +
                  "\116\0\1\10\15\0\1\10\2\0\1\10\74\0\1\11" +
                  "\1\12\1\11\2\12\1\0\1\12\1\0\1\114\12\0" +
                  "\1\11\1\0\30\11\5\0\6\11\2\0\4\11\12\0" +
                  "\3\11\2\0\5\12\1\0\1\12\14\0\1\12\1\0" +
                  "\30\12\5\0\6\12\2\0\4\12\12\0\3\12\2\0" +
                  "\5\12\1\0\1\12\14\0\1\12\1\115\30\12\5\0" +
                  "\6\12\2\0\4\12\12\0\3\12\2\0\3\116\20\0" +
                  "\1\116\1\0\30\116\5\0\6\116\2\0\4\116\12\0" +
                  "\3\116\73\0\1\117\25\0\1\120\20\0\1\121\45\0" +
                  "\1\117\23\0\1\122\1\123\1\122\2\0\2\124\2\0" +
                  "\1\124\11\0\1\122\1\124\30\122\2\0\3\124\6\122" +
                  "\1\0\1\117\4\122\11\0\1\124\3\122\2\0\3\125" +
                  "\20\0\1\125\1\0\30\125\5\0\6\125\2\0\4\125" +
                  "\12\0\3\125\15\126\1\127\1\130\76\126\16\131\1\132" +
                  "\4\131\1\127\71\131\16\133\1\134\5\133\1\135\70\133" +
                  "\2\0\2\12\1\24\2\12\1\0\1\12\14\0\1\24" +
                  "\1\115\30\12\5\0\6\12\2\0\4\12\12\0\3\12" +
                  "\2\0\1\11\1\12\1\11\2\12\1\0\1\12\1\0" +
                  "\1\114\12\0\1\11\1\0\1\11\1\136\17\11\1\137" +
                  "\6\11\5\0\6\11\2\0\4\11\12\0\3\11\2\0" +
                  "\1\11\1\12\1\11\2\12\1\0\1\12\1\0\1\114" +
                  "\12\0\1\11\1\0\5\11\1\140\22\11\5\0\6\11" +
                  "\2\0\4\11\12\0\3\11\2\0\1\11\1\12\1\11" +
                  "\2\12\1\0\1\12\1\0\1\114\12\0\1\11\1\0" +
                  "\1\141\27\11\5\0\6\11\2\0\4\11\12\0\3\11" +
                  "\2\0\1\11\1\12\1\11\2\12\1\0\1\12\1\0" +
                  "\1\114\12\0\1\11\1\0\1\11\1\136\7\11\1\142" +
                  "\16\11\5\0\6\11\2\0\4\11\12\0\3\11\2\0" +
                  "\1\11\1\12\1\11\2\12\1\0\1\12\1\0\1\114" +
                  "\12\0\1\11\1\0\13\11\1\143\14\11\5\0\6\11" +
                  "\2\0\4\11\12\0\3\11\2\0\1\11\1\12\1\11" +
                  "\2\12\1\0\1\12\1\0\1\114\12\0\1\11\1\0" +
                  "\16\11\1\144\11\11\5\0\4\11\1\145\1\11\2\0" +
                  "\4\11\12\0\3\11\2\0\1\11\1\12\1\11\2\12" +
                  "\1\0\1\12\1\0\1\114\12\0\1\11\1\0\5\11" +
                  "\1\140\7\11\1\146\12\11\5\0\6\11\2\0\4\11" +
                  "\12\0\3\11\2\0\1\11\1\12\1\11\2\12\1\0" +
                  "\1\12\1\0\1\114\12\0\1\11\1\0\30\11\5\0" +
                  "\4\11\1\145\1\11\2\0\4\11\12\0\3\11\2\0" +
                  "\1\11\1\12\1\11\2\12\1\0\1\12\1\0\1\114" +
                  "\12\0\1\11\1\0\2\11\1\147\25\11\5\0\6\11" +
                  "\2\0\4\11\12\0\3\11\2\0\1\11\1\12\1\11" +
                  "\2\12\1\0\1\12\1\0\1\114\12\0\1\11\1\0" +
                  "\20\11\1\150\7\11\5\0\6\11\2\0\4\11\12\0" +
                  "\3\11\2\0\1\11\1\12\1\11\2\12\1\0\1\12" +
                  "\1\0\1\114\12\0\1\11\1\0\27\11\1\151\5\0" +
                  "\6\11\2\0\4\11\12\0\3\11\2\0\1\11\1\12" +
                  "\1\11\2\12\1\0\1\12\1\0\1\114\12\0\1\11" +
                  "\1\0\3\11\1\152\1\11\1\153\22\11\5\0\6\11" +
                  "\2\0\4\11\12\0\3\11\2\0\3\154\20\0\1\154" +
                  "\1\0\30\154\5\0\6\154\2\0\4\154\12\0\3\154" +
                  "\17\44\2\0\74\44\62\0\1\44\1\155\33\0\1\11" +
                  "\1\12\1\11\2\12\1\0\1\12\1\0\1\114\12\0" +
                  "\1\11\1\0\14\11\1\156\13\11\5\0\6\11\2\0" +
                  "\4\11\12\0\3\11\2\0\1\11\1\12\1\11\2\12" +
                  "\1\0\1\12\1\0\1\114\12\0\1\11\1\0\11\11" +
                  "\1\157\16\11\5\0\6\11\2\0\4\11\12\0\3\11" +
                  "\2\0\1\11\1\12\1\11\2\12\1\0\1\12\1\0" +
                  "\1\114\12\0\1\11\1\0\13\11\1\160\14\11\5\0" +
                  "\6\11\2\0\4\11\12\0\3\11\2\0\1\11\1\12" +
                  "\1\11\2\12\1\0\1\12\1\0\1\114\12\0\1\11" +
                  "\1\0\30\11\5\0\6\11\2\0\1\161\3\11\12\0" +
                  "\3\11\2\0\1\11\1\12\1\11\2\12\1\0\1\12" +
                  "\1\0\1\114\12\0\1\11\1\0\15\11\1\162\12\11" +
                  "\5\0\6\11\2\0\4\11\12\0\3\11\2\0\3\163" +
                  "\20\0\1\163\1\0\30\163\5\0\6\163\1\164\1\0" +
                  "\4\163\12\0\3\163\14\0\1\165\56\0\1\117\23\0" +
                  "\1\11\1\12\1\11\2\12\1\0\1\12\1\0\1\114" +
                  "\12\0\1\11\1\0\10\11\1\166\1\156\16\11\5\0" +
                  "\6\11\2\0\4\11\12\0\3\11\2\0\1\11\1\12" +
                  "\1\11\2\12\1\0\1\12\1\0\1\114\12\0\1\11" +
                  "\1\0\30\11\5\0\6\11\2\0\2\11\1\167\1\11" +
                  "\12\0\3\11\2\0\1\11\1\12\1\11\2\12\1\0" +
                  "\1\12\1\0\1\114\12\0\1\11\1\0\30\11\5\0" +
                  "\6\11\2\0\2\11\1\170\1\11\12\0\3\11\2\0" +
                  "\5\73\1\0\1\73\14\0\1\73\1\0\30\73\5\0" +
                  "\6\73\2\0\4\73\12\0\3\73\62\0\1\44\1\171" +
                  "\33\0\1\75\1\76\1\75\2\76\1\0\1\76\1\0" +
                  "\1\172\12\0\1\75\1\0\30\75\5\0\6\75\2\0" +
                  "\4\75\12\0\3\75\2\0\5\76\1\0\1\76\14\0" +
                  "\1\76\1\0\30\76\5\0\6\76\2\0\4\76\12\0" +
                  "\3\76\2\173\1\174\1\173\1\174\7\173\1\7\10\173" +
                  "\1\174\1\173\30\174\5\173\6\174\2\173\4\174\12\173" +
                  "\3\174\2\0\5\101\1\0\1\101\14\0\1\101\1\0" +
                  "\30\101\5\0\6\101\2\0\4\101\12\0\3\101\14\0" +
                  "\1\175\102\0\5\101\1\0\1\101\14\0\1\101\1\0" +
                  "\30\101\5\0\6\101\2\0\1\176\3\101\12\0\3\101" +
                  "\2\0\5\101\1\0\1\101\14\0\1\101\1\0\12\101" +
                  "\1\177\15\101\5\0\6\101\2\0\4\101\12\0\3\101" +
                  "\24\107\1\0\33\107\1\0\34\107\103\0\1\200\11\0" +
                  "\17\112\2\107\3\112\1\44\33\112\1\44\34\112\24\107" +
                  "\1\0\33\107\1\0\1\107\1\112\1\201\31\107\4\0" +
                  "\1\202\20\0\1\202\71\0\5\116\1\0\1\116\14\0" +
                  "\1\116\1\0\30\116\5\0\6\116\2\0\4\116\12\0" +
                  "\3\116\26\0\1\115\72\0\1\121\20\0\1\121\1\115" +
                  "\70\0\1\122\1\123\1\122\2\123\1\203\1\122\1\0" +
                  "\1\204\1\124\1\205\10\0\1\122\1\203\30\122\2\0" +
                  "\3\124\6\122\2\0\4\122\11\0\1\124\3\122\2\0" +
                  "\5\123\1\124\1\123\2\0\1\124\1\205\10\0\1\123" +
                  "\1\124\30\123\2\0\3\124\6\123\2\0\4\123\11\0" +
                  "\1\124\3\123\2\0\3\123\2\0\2\124\2\0\1\124" +
                  "\1\205\10\0\1\123\1\124\30\123\2\0\3\124\6\123" +
                  "\2\0\4\123\11\0\1\124\3\123\2\0\5\125\1\0" +
                  "\1\125\14\0\1\125\1\0\30\125\5\0\6\125\2\0" +
                  "\4\125\12\0\3\125\57\0\1\206\35\0\17\126\4\0" +
                  "\72\126\17\131\4\0\72\131\17\133\4\0\72\133\2\0" +
                  "\1\11\1\12\1\11\2\12\1\0\1\12\1\0\1\114" +
                  "\12\0\1\11\1\0\2\11\1\207\25\11\5\0\6\11" +
                  "\2\0\4\11\12\0\3\11\2\0\1\11\1\12\1\11" +
                  "\2\12\1\0\1\12\1\0\1\114\12\0\1\11\1\0" +
                  "\23\11\1\210\4\11\5\0\6\11\2\0\4\11\12\0" +
                  "\3\11\2\0\1\11\1\12\1\11\2\12\1\0\1\12" +
                  "\1\0\1\114\12\0\1\11\1\0\6\11\1\211\21\11" +
                  "\5\0\6\11\2\0\4\11\12\0\3\11\2\0\1\11" +
                  "\1\12\1\11\2\12\1\0\1\12\1\0\1\114\12\0" +
                  "\1\11\1\0\1\11\1\212\26\11\5\0\6\11\2\0" +
                  "\4\11\12\0\3\11\2\0\1\11\1\12\1\11\2\12" +
                  "\1\0\1\12\1\0\1\114\12\0\1\11\1\0\12\11" +
                  "\1\213\15\11\5\0\6\11\2\0\4\11\12\0\3\11" +
                  "\2\0\1\11\1\12\1\11\2\12\1\0\1\12\1\0" +
                  "\1\114\12\0\1\11\1\0\10\11\1\214\17\11\5\0" +
                  "\6\11\2\0\4\11\12\0\3\11\2\0\1\11\1\12" +
                  "\1\11\2\12\1\0\1\12\1\0\1\114\12\0\1\11" +
                  "\1\0\17\11\1\215\10\11\5\0\6\11\2\0\4\11" +
                  "\12\0\3\11\2\0\1\11\1\12\1\11\2\12\1\0" +
                  "\1\12\1\0\1\114\12\0\1\11\1\0\30\11\5\0" +
                  "\3\11\1\156\2\11\2\0\4\11\12\0\3\11\2\0" +
                  "\1\11\1\12\1\11\2\12\1\0\1\12\1\0\1\114" +
                  "\12\0\1\11\1\0\16\11\1\216\11\11\5\0\6\11" +
                  "\2\0\4\11\12\0\3\11\2\0\1\11\1\12\1\11" +
                  "\2\12\1\0\1\12\1\0\1\114\12\0\1\11\1\0" +
                  "\6\11\1\217\14\11\1\220\4\11\5\0\6\11\2\0" +
                  "\4\11\12\0\3\11\2\0\1\11\1\12\1\11\2\12" +
                  "\1\0\1\12\1\0\1\114\12\0\1\11\1\0\1\221" +
                  "\27\11\5\0\6\11\2\0\4\11\12\0\3\11\2\0" +
                  "\1\11\1\12\1\11\2\12\1\0\1\12\1\0\1\114" +
                  "\12\0\1\11\1\0\27\11\1\222\5\0\6\11\2\0" +
                  "\4\11\12\0\3\11\2\0\1\11\1\12\1\11\2\12" +
                  "\1\0\1\12\1\0\1\114\12\0\1\11\1\0\26\11" +
                  "\1\223\1\11\5\0\6\11\2\0\4\11\12\0\3\11" +
                  "\2\0\1\11\1\12\1\11\2\12\1\0\1\12\1\0" +
                  "\1\114\12\0\1\11\1\0\1\224\27\11\5\0\6\11" +
                  "\2\0\4\11\12\0\3\11\2\0\5\154\1\0\1\154" +
                  "\14\0\1\154\1\0\30\154\5\0\6\154\2\0\4\154" +
                  "\12\0\3\154\63\225\1\226\31\225\2\0\1\11\1\12" +
                  "\1\11\2\12\1\0\1\12\1\0\1\114\12\0\1\11" +
                  "\1\0\13\11\1\227\14\11\5\0\6\11\2\0\4\11" +
                  "\12\0\3\11\2\0\1\11\1\12\1\11\2\12\1\0" +
                  "\1\12\1\0\1\114\12\0\1\11\1\0\14\11\1\230" +
                  "\13\11\5\0\6\11\2\0\4\11\12\0\3\11\2\0" +
                  "\1\11\1\12\1\11\2\12\1\0\1\12\1\0\1\114" +
                  "\12\0\1\11\1\0\10\11\1\156\17\11\5\0\6\11" +
                  "\2\0\4\11\12\0\3\11\2\0\1\11\1\12\1\11" +
                  "\2\12\1\0\1\12\1\0\1\114\12\0\1\11\1\0" +
                  "\11\11\1\156\16\11\5\0\6\11\2\0\4\11\12\0" +
                  "\3\11\2\0\5\163\1\0\1\163\14\0\1\163\1\0" +
                  "\30\163\5\0\6\163\2\0\4\163\12\0\3\163\2\0" +
                  "\1\11\1\12\1\11\2\12\1\0\1\12\1\0\1\114" +
                  "\12\0\1\11\1\0\30\11\5\0\6\11\2\0\2\11" +
                  "\1\231\1\11\12\0\3\11\2\0\1\11\1\12\1\11" +
                  "\2\12\1\0\1\12\1\0\1\114\12\0\1\11\1\0" +
                  "\30\11\5\0\6\11\2\0\1\232\3\11\12\0\3\11" +
                  "\2\0\1\11\1\12\1\11\2\12\1\0\1\12\1\0" +
                  "\1\114\12\0\1\11\1\0\13\11\1\233\14\11\5\0" +
                  "\6\11\2\0\4\11\12\0\3\11\63\225\1\234\31\225" +
                  "\14\173\1\7\102\173\1\174\1\173\1\174\2\173\2\174" +
                  "\1\173\1\235\1\173\1\7\10\173\32\174\5\173\6\174" +
                  "\2\173\4\174\12\173\3\174\2\0\5\101\1\0\1\101" +
                  "\14\0\1\101\1\0\30\101\5\0\6\101\2\0\4\101" +
                  "\12\0\2\101\1\236\2\0\5\101\1\0\1\101\14\0" +
                  "\1\101\1\0\13\101\1\237\14\101\5\0\6\101\2\0" +
                  "\4\101\12\0\3\101\24\240\1\225\33\240\1\225\2\240" +
                  "\1\241\31\240\2\0\1\122\1\123\1\122\2\0\2\203" +
                  "\1\0\1\204\1\124\1\205\10\0\1\122\1\203\30\122" +
                  "\2\0\3\124\6\122\2\0\4\122\11\0\1\124\3\122" +
                  "\2\0\3\242\2\0\2\243\2\0\1\243\11\0\1\242" +
                  "\1\243\30\242\2\0\3\243\6\242\2\0\4\242\11\0" +
                  "\1\243\3\242\57\0\1\244\37\0\1\11\1\12\1\11" +
                  "\2\12\1\0\1\12\1\0\1\114\12\0\1\11\1\0" +
                  "\3\11\1\245\24\11\5\0\6\11\2\0\4\11\12\0" +
                  "\3\11\2\0\1\11\1\12\1\11\2\12\1\0\1\12" +
                  "\1\0\1\114\12\0\1\11\1\0\3\11\1\246\24\11" +
                  "\5\0\6\11\2\0\4\11\12\0\3\11\2\0\1\11" +
                  "\1\12\1\11\2\12\1\0\1\12\1\0\1\114\12\0" +
                  "\1\11\1\0\7\11\1\207\20\11\5\0\6\11\2\0" +
                  "\4\11\12\0\3\11\2\0\1\11\1\12\1\11\2\12" +
                  "\1\0\1\12\1\0\1\114\12\0\1\11\1\0\21\11" +
                  "\1\247\6\11\5\0\6\11\2\0\4\11\12\0\3\11" +
                  "\2\0\1\11\1\12\1\11\2\12\1\0\1\12\1\0" +
                  "\1\114\12\0\1\11\1\0\13\11\1\245\14\11\5\0" +
                  "\6\11\2\0\4\11\12\0\3\11\2\0\1\11\1\12" +
                  "\1\11\2\12\1\0\1\12\1\0\1\114\12\0\1\11" +
                  "\1\0\12\11\1\250\15\11\5\0\6\11\2\0\4\11" +
                  "\12\0\3\11\2\0\1\11\1\12\1\11\2\12\1\0" +
                  "\1\12\1\0\1\114\12\0\1\11\1\0\13\11\1\156" +
                  "\14\11\5\0\6\11\2\0\4\11\12\0\3\11\2\0" +
                  "\1\11\1\12\1\11\2\12\1\0\1\12\1\0\1\114" +
                  "\12\0\1\11\1\0\17\11\1\213\10\11\5\0\6\11" +
                  "\2\0\4\11\12\0\3\11\2\0\1\11\1\12\1\11" +
                  "\2\12\1\0\1\12\1\0\1\114\12\0\1\11\1\0" +
                  "\6\11\1\251\21\11\5\0\6\11\2\0\4\11\12\0" +
                  "\3\11\2\0\1\11\1\12\1\11\2\12\1\0\1\12" +
                  "\1\0\1\114\12\0\1\11\1\0\24\11\1\252\3\11" +
                  "\5\0\6\11\2\0\4\11\12\0\3\11\2\0\1\11" +
                  "\1\12\1\11\2\12\1\0\1\12\1\0\1\114\12\0" +
                  "\1\11\1\0\3\11\1\253\24\11\5\0\6\11\2\0" +
                  "\4\11\12\0\3\11\2\0\1\11\1\12\1\11\2\12" +
                  "\1\0\1\12\1\0\1\114\12\0\1\11\1\0\6\11" +
                  "\1\254\21\11\5\0\6\11\2\0\4\11\12\0\3\11" +
                  "\2\0\1\11\1\12\1\11\2\12\1\0\1\12\1\0" +
                  "\1\114\12\0\1\11\1\0\21\11\1\255\6\11\5\0" +
                  "\6\11\2\0\4\11\12\0\3\11\2\0\1\11\1\12" +
                  "\1\11\2\12\1\0\1\12\1\0\1\114\12\0\1\11" +
                  "\1\0\3\11\1\256\24\11\5\0\6\11\2\0\4\11" +
                  "\12\0\3\11\63\225\1\257\31\225\63\260\1\261\31\260" +
                  "\2\0\1\11\1\12\1\11\2\12\1\0\1\12\1\0" +
                  "\1\114\12\0\1\11\1\0\14\11\1\262\13\11\5\0" +
                  "\6\11\2\0\4\11\12\0\3\11\2\0\1\11\1\12" +
                  "\1\11\2\12\1\0\1\12\1\0\1\114\12\0\1\11" +
                  "\1\0\30\11\5\0\1\263\5\11\2\0\4\11\12\0" +
                  "\3\11\2\0\1\11\1\12\1\11\2\12\1\0\1\12" +
                  "\1\0\1\114\12\0\1\11\1\0\13\11\1\264\14\11" +
                  "\5\0\6\11\2\0\4\11\12\0\3\11\2\0\1\11" +
                  "\1\12\1\11\2\12\1\0\1\12\1\0\1\114\12\0" +
                  "\1\11\1\0\30\11\5\0\6\11\2\0\1\144\3\11" +
                  "\12\0\3\11\2\0\1\11\1\12\1\11\2\12\1\0" +
                  "\1\12\1\0\1\114\12\0\1\11\1\0\30\11\5\0" +
                  "\4\11\1\156\1\11\2\0\4\11\12\0\3\11\2\173" +
                  "\3\265\2\173\2\266\2\173\1\266\1\7\10\173\1\265" +
                  "\1\266\30\265\2\173\3\266\6\265\2\173\4\265\11\173" +
                  "\1\266\3\265\2\0\5\101\1\0\1\101\14\0\1\101" +
                  "\1\0\30\101\5\0\6\101\2\0\4\101\12\0\2\101" +
                  "\1\267\2\0\5\101\1\0\1\101\14\0\1\101\1\0" +
                  "\11\101\1\270\16\101\5\0\6\101\2\0\4\101\12\0" +
                  "\3\101\24\240\1\225\33\240\1\225\2\240\1\271\31\240" +
                  "\24\272\1\260\33\272\1\260\2\272\1\273\31\272\2\0" +
                  "\5\242\1\243\1\242\2\0\1\243\1\274\10\0\1\242" +
                  "\1\243\30\242\2\0\3\243\6\242\2\0\4\242\11\0" +
                  "\1\243\3\242\2\0\3\242\2\0\2\243\2\0\1\243" +
                  "\1\274\10\0\1\242\1\243\30\242\2\0\3\243\6\242" +
                  "\2\0\4\242\11\0\1\243\3\242\2\0\1\275\6\0" +
                  "\1\276\1\277\14\0\30\275\5\0\6\275\2\0\4\275" +
                  "\12\0\3\275\2\0\1\11\1\12\1\11\2\12\1\0" +
                  "\1\12\1\0\1\114\12\0\1\11\1\0\20\11\1\300" +
                  "\7\11\5\0\6\11\2\0\4\11\12\0\3\11\2\0" +
                  "\1\11\1\12\1\11\2\12\1\0\1\12\1\0\1\114" +
                  "\12\0\1\11\1\0\11\11\1\233\16\11\5\0\6\11" +
                  "\2\0\4\11\12\0\3\11\2\0\1\11\1\12\1\11" +
                  "\2\12\1\0\1\12\1\0\1\114\12\0\1\11\1\0" +
                  "\3\11\1\301\24\11\5\0\6\11\2\0\4\11\12\0" +
                  "\3\11\2\0\1\11\1\12\1\11\2\12\1\0\1\12" +
                  "\1\0\1\114\12\0\1\11\1\0\22\11\1\252\5\11" +
                  "\5\0\6\11\2\0\4\11\12\0\3\11\2\0\1\11" +
                  "\1\12\1\11\2\12\1\0\1\12\1\0\1\114\12\0" +
                  "\1\11\1\0\3\11\1\302\24\11\5\0\6\11\2\0" +
                  "\4\11\12\0\3\11\2\0\1\11\1\12\1\11\2\12" +
                  "\1\0\1\12\1\0\1\114\12\0\1\11\1\0\23\11" +
                  "\1\303\4\11\5\0\6\11\2\0\4\11\12\0\3\11" +
                  "\2\0\1\11\1\12\1\11\2\12\1\0\1\12\1\0" +
                  "\1\114\12\0\1\11\1\0\10\11\1\304\17\11\5\0" +
                  "\6\11\2\0\4\11\12\0\3\11\62\225\1\305\32\225" +
                  "\63\260\1\306\113\260\1\225\1\307\31\260\2\0\1\11" +
                  "\1\12\1\11\2\12\1\0\1\12\1\0\1\114\12\0" +
                  "\1\11\1\0\30\11\5\0\1\310\5\11\2\0\4\11" +
                  "\12\0\3\11\2\0\1\11\1\12\1\11\2\12\1\0" +
                  "\1\12\1\0\1\114\12\0\1\11\1\0\30\11\5\0" +
                  "\4\11\1\311\1\11\2\0\4\11\12\0\3\11\2\0" +
                  "\1\11\1\12\1\11\2\12\1\0\1\12\1\0\1\114" +
                  "\12\0\1\11\1\0\11\11\1\312\16\11\5\0\6\11" +
                  "\2\0\4\11\12\0\3\11\2\173\5\265\1\266\1\265" +
                  "\2\173\1\266\1\313\10\173\1\265\1\266\30\265\2\173" +
                  "\3\266\6\265\2\173\4\265\11\173\1\266\3\265\2\173" +
                  "\3\265\2\173\2\266\2\173\1\266\1\313\10\173\1\265" +
                  "\1\266\30\265\2\173\3\266\6\265\2\173\4\265\11\173" +
                  "\1\266\3\265\2\0\5\101\1\0\1\101\14\0\1\101" +
                  "\1\0\15\101\1\314\12\101\5\0\6\101\2\0\4\101" +
                  "\12\0\3\101\2\0\5\101\1\0\1\101\14\0\1\101" +
                  "\1\0\30\101\5\0\6\101\2\0\4\101\12\0\1\101" +
                  "\1\315\1\101\24\240\1\225\33\240\1\225\1\240\1\107" +
                  "\32\240\24\272\1\260\33\272\1\260\2\272\1\316\55\272" +
                  "\1\260\33\272\1\260\1\272\1\240\1\241\31\272\2\0" +
                  "\1\275\1\0\1\275\5\0\1\277\12\0\1\275\1\0" +
                  "\30\275\5\0\6\275\2\0\4\275\12\0\3\275\2\0" +
                  "\1\317\1\0\1\317\20\0\1\317\1\0\30\317\5\0" +
                  "\6\317\2\0\4\317\12\0\3\317\2\0\3\320\20\0" +
                  "\1\320\1\0\30\320\5\0\6\320\2\0\4\320\12\0" +
                  "\3\320\2\0\1\11\1\12\1\11\2\12\1\0\1\12" +
                  "\1\0\1\114\12\0\1\11\1\0\22\11\1\246\5\11" +
                  "\5\0\6\11\2\0\4\11\12\0\3\11\2\0\1\11" +
                  "\1\12\1\11\2\12\1\0\1\12\1\0\1\114\12\0" +
                  "\1\11\1\0\1\11\1\246\26\11\5\0\6\11\2\0" +
                  "\4\11\12\0\3\11\2\0\1\11\1\12\1\11\2\12" +
                  "\1\0\1\12\1\0\1\114\12\0\1\11\1\0\5\11" +
                  "\1\321\22\11\5\0\6\11\2\0\4\11\12\0\3\11" +
                  "\2\0\1\11\1\12\1\11\2\12\1\0\1\12\1\0" +
                  "\1\114\12\0\1\11\1\0\5\11\1\322\22\11\5\0" +
                  "\6\11\2\0\4\11\12\0\3\11\2\0\1\11\1\12" +
                  "\1\11\2\12\1\0\1\12\1\0\1\114\12\0\1\11" +
                  "\1\0\21\11\1\137\6\11\5\0\6\11\2\0\4\11" +
                  "\12\0\3\11\62\260\1\323\114\260\1\324\1\325\31\260" +
                  "\2\0\1\11\1\12\1\11\2\12\1\0\1\12\1\0" +
                  "\1\114\12\0\1\11\1\0\30\11\5\0\2\11\1\326" +
                  "\3\11\2\0\4\11\12\0\3\11\2\0\1\11\1\12" +
                  "\1\11\2\12\1\0\1\12\1\0\1\114\12\0\1\11" +
                  "\1\0\13\11\1\327\14\11\5\0\6\11\2\0\4\11" +
                  "\12\0\3\11\2\0\1\11\1\12\1\11\2\12\1\0" +
                  "\1\12\1\0\1\114\12\0\1\11\1\0\30\11\5\0" +
                  "\6\11\2\0\3\11\1\330\12\0\3\11\2\0\5\101" +
                  "\1\0\1\101\14\0\1\101\1\0\30\101\5\0\4\101" +
                  "\1\331\1\101\2\0\4\101\12\0\3\101\24\272\1\260" +
                  "\33\272\1\260\1\272\1\107\32\272\2\0\1\317\1\0" +
                  "\1\317\2\0\2\317\1\0\1\332\12\0\32\317\5\0" +
                  "\6\317\2\0\4\317\12\0\3\317\2\0\5\320\1\0" +
                  "\1\320\14\0\1\320\1\0\30\320\5\0\6\320\2\0" +
                  "\4\320\12\0\3\320\2\0\1\11\1\12\1\11\2\12" +
                  "\1\0\1\12\1\0\1\114\12\0\1\11\1\0\20\11" +
                  "\1\246\7\11\5\0\6\11\2\0\4\11\12\0\3\11" +
                  "\2\0\1\11\1\12\1\11\2\12\1\0\1\12\1\0" +
                  "\1\114\12\0\1\11\1\0\6\11\1\246\21\11\5\0" +
                  "\6\11\2\0\4\11\12\0\3\11\62\260\1\333\1\307" +
                  "\31\260\2\0\1\11\1\12\1\11\2\12\1\0\1\12" +
                  "\1\0\1\114\12\0\1\11\1\0\30\11\5\0\1\144" +
                  "\5\11\2\0\4\11\12\0\3\11\2\0\5\101\1\0" +
                  "\1\101\14\0\1\101\1\0\30\101\5\0\3\101\1\315" +
                  "\2\101\2\0\4\101\12\0\3\101\2\0\3\334\2\0" +
                  "\2\335\2\0\1\335\11\0\1\334\1\335\30\334\2\0" +
                  "\3\335\6\334\2\0\4\334\11\0\1\335\3\334\2\0" +
                  "\5\334\1\335\1\334\2\0\1\335\1\336\10\0\1\334" +
                  "\1\335\30\334\2\0\3\335\6\334\2\0\4\334\11\0" +
                  "\1\335\3\334\2\0\3\334\2\0\2\335\2\0\1\335" +
                  "\1\336\10\0\1\334\1\335\30\334\2\0\3\335\6\334" +
                  "\2\0\4\334\11\0\1\335\3\334";

  private static int[] zzUnpackTrans() {
    int[] result = new int[13629];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\6\0\1\11\15\1\1\11\14\1\1\11\3\1\1\11" +
                  "\12\1\12\11\5\1\1\11\3\1\1\11\1\1\1\11" +
                  "\1\1\1\11\3\1\2\0\1\1\1\11\2\1\3\0" +
                  "\1\1\1\0\1\1\5\0\1\11\17\1\1\0\6\1" +
                  "\1\0\1\11\3\1\1\0\1\11\2\0\1\11\2\1" +
                  "\1\11\2\1\2\0\1\11\1\0\16\1\1\0\6\1" +
                  "\2\0\4\1\3\0\12\1\3\0\3\1\2\0\5\1" +
                  "\1\11\3\0\5\1\1\11\2\0\3\1\1\11\3\1" +
                  "\1\0\3\1\1\11\1\1\1\0\4\1\1\0\1\1" +
                  "\2\0\1\11";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[222];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * the input device
   */
  private java.io.Reader zzReader;

  /**
   * the current state of the DFA
   */
  private int zzState;

  /**
   * the current lexical state
   */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private CharSequence zzBuffer = "";

  /**
   * the textposition at the last accepting state
   */
  private int zzMarkedPos;

  /**
   * the current text position in the buffer
   */
  private int zzCurrentPos;

  /**
   * startRead marks the beginning of the yytext() string in the buffer
   */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /**
   * zzAtEOF == true <=> the scanner is at the EOF
   */
  private boolean zzAtEOF;

  /**
   * denotes if the user-EOF-code has already been executed
   */
  private boolean zzEOFDone;

  /* user code: */
  boolean inInterpolation = false;

  void enterInterpolation() {
    inInterpolation = true;
    yybegin(INTERPOLATION);
  }

  void leaveInterpolation() {
    inInterpolation = false;
    yybegin(YYINITIAL);
  }


  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  ODTHighlightingLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead + pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }


      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            return TokenType.BAD_CHARACTER;
          }
          // fall through
          case 52:
            break;
          case 2: {
            return TokenType.WHITE_SPACE;
          }
          // fall through
          case 53:
            break;
          case 3: {
            return ODTHighlightingTypes.OPERATOR_CALLNAME;
          }
          // fall through
          case 54:
            break;
          case 4: {
            return ODTHighlightingTypes.NUMBER;
          }
          // fall through
          case 55:
            break;
          case 5: {
            return ODTTypes.AT;
          }
          // fall through
          case 56:
            break;
          case 6: {
            return ODTHighlightingTypes.OPERATOR_SIGN;
          }
          // fall through
          case 57:
            break;
          case 7: {
            return ODTTypes.COLON;
          }
          // fall through
          case 58:
            break;
          case 8: {
            return ODTHighlightingTypes.IDENTIFIER;
          }
          // fall through
          case 59:
            break;
          case 9: {
            return ODTTypes.CARET;
          }
          // fall through
          case 60:
            break;
          case 10: {
            return ODTIgnored.END_OF_LINE_COMMENT;
          }
          // fall through
          case 61:
            break;
          case 11: {
            return ODTHighlightingTypes.PATH_DELIMITER;
          }
          // fall through
          case 62:
            break;
          case 12: {
            return ODTTypes.ASTERIX;
          }
          // fall through
          case 63:
            break;
          case 13: {
            return ODTTypes.PIPE;
          }
          // fall through
          case 64:
            break;
          case 14: {
            return ODTTypes.COMMA;
          }
          // fall through
          case 65:
            break;
          case 15: {
            return ODTTypes.SEMICOLON;
          }
          // fall through
          case 66:
            break;
          case 16: {
            return ODTTypes.CURLY_OPEN;
          }
          // fall through
          case 67:
            break;
          case 17: {
            if (inInterpolation) {
              enterInterpolation();
              return ODTTypes.INTERPOLATION_END;
            }
            return ODTTypes.CURLY_CLOSED;
          }
          // fall through
          case 68:
            break;
          case 18: {
            return ODTTypes.BRACKET_OPEN;
          }
          // fall through
          case 69:
            break;
          case 19: {
            return ODTTypes.BRACKET_CLOSED;
          }
          // fall through
          case 70:
            break;
          case 20: {
            return ODTTypes.PARENTHESES_OPEN;
          }
          // fall through
          case 71:
            break;
          case 21: {
            return ODTTypes.PARENTHESES_CLOSE;
          }
          // fall through
          case 72:
            break;
          case 22: {
            return ODTTypes.QUESTION_MARK;
          }
          // fall through
          case 73:
            break;
          case 23: {
            yybegin(YYINITIAL);
            return ODTHighlightingTypes.COMMAND_CALLNAME;
          }
          // fall through
          case 74:
            break;
          case 24: {
            yybegin(YYINITIAL);
            return ODTHighlightingTypes.CURIE_LOCALNAME;
          }
          // fall through
          case 75:
            break;
          case 25: {
            return ODTHighlightingTypes.DEFINE_NAME;
          }
          // fall through
          case 76:
            break;
          case 26: {
            yybegin(DEFINE_PARAMS);
            return ODTHighlightingTypes.PARENTHESES;
          }
          // fall through
          case 77:
            break;
          case 27: {
            yybegin(DEFINE);
            return ODTHighlightingTypes.PARENTHESES;
          }
          // fall through
          case 78:
            break;
          case 28: {
            return ODTTypes.STRING;
          }
          // fall through
          case 79:
            break;
          case 29: {
            leaveInterpolation();
            return ODTTypes.INTERPOLATED_STRING_END;
          }
          // fall through
          case 80:
            break;
          case 30: {
            yypushback(yylength() - 1);
            yybegin(COMMAND_CALLNAME);
            return ODTTypes.AT;
          }
          // fall through
          case 81:
            break;
          case 31: {
            yypushback(yylength());
            yybegin(PREFIX);
            return ODTHighlightingTypes.EMPTY;
          }
          // fall through
          case 82:
            break;
          case 32: {
            yypushback(yylength() - 1); // pushback all but the opening backtick
            enterInterpolation();
            return ODTTypes.INTERPOLATED_STRING_START;
          }
          // fall through
          case 83:
            break;
          case 33: {
            return ODTTypes.VARIABLE_NAME;
          }
          // fall through
          case 84:
            break;
          case 34: {
            return ODTHighlightingTypes.KEYWORD;
          }
          // fall through
          case 85:
            break;
          case 35: {
            return ODTTypes.TAG;
          }
          // fall through
          case 86:
            break;
          case 36: {
            return ODTTypes.LAMBDA;
          }
          // fall through
          case 87:
            break;
          case 37: {
            yypushback(1);
            return ODTHighlightingTypes.CURIE_PREFIX;
          }
          // fall through
          case 88:
            break;
          case 38: {
            yybegin(YYINITIAL);
            return ODTTypes.LAMBDA;
          }
          // fall through
          case 89:
            break;
          case 39: {
            yybegin(YYINITIAL);
            return ODTTypes.INTERPOLATION_START;
          }
          // fall through
          case 90:
            break;
          case 40: {
            return ODTTypes.SCHEMALESS_IRI;
          }
          // fall through
          case 91:
            break;
          case 41: {
            return ODTIgnored.DOC_COMMENT_START;
          }
          // fall through
          case 92:
            break;
          case 42: {
            return ODTTypes.BOOLEAN;
          }
          // fall through
          case 93:
            break;
          case 43: {
            return ODTTypes.PRIMITIVE;
          }
          // fall through
          case 94:
            break;
          case 44: {
            return ODTTypes.NULL;
          }
          // fall through
          case 95:
            break;
          case 45: {
            return ODTTypes.IRI;
          }
          // fall through
          case 96:
            break;
          case 46: {
            return ODTIgnored.MULTILINE; // can be an indent/dedent token or JAVADOCS_START
          }
          // fall through
          case 97:
            break;
          case 47: {
            yybegin(YYINITIAL);
            return ODTTypes.IRI;
          }
          // fall through
          case 98:
            break;
          case 48: {
            return ODTTypes.TYPED_VALUE;
          }
          // fall through
          case 99:
            break;
          case 49: {
            return JavaDocElementType.DOC_COMMENT; // can be an indent/dedent token or JAVADOCS_START
          }
          // fall through
          case 100:
            break;
          case 50: {
            yybegin(PREFIX);
            return ODTHighlightingTypes.KEYWORD;
          }
          // fall through
          case 101:
            break;
          case 51: {
            yybegin(DEFINE);
            return ODTHighlightingTypes.KEYWORD;
          }
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
