{
  "name": "Binding",
  "tooltip": "A `Binding` is the bridge between the javascript user interface layer and an OMT component. The user interface layer and the OMT\ncomponent can exchange information by reading and writing to a binding. Bindings are available as variables to the ODT statements\nin the OMT object.",
  "shortcut": {
    "regEx": {
      "pattern": "^\\s*(\\$\\w+)\\s*(?:\\(\\s*(sync|input|output)\\s*\\))?$",
      "assignTo": [
        "bindTo",
        {
          "output": true,
          "condition": "output"
        }
      ]
    }
  },
  "attributes": {
    "bindTo": {
      "type": "string",
      "node": "scalar",
      "required": true,
      "tooltip": "The name of the ODT variable this binding should read/write to. Since this is an ODT variable name it should always start with `$`.\nThe Binding will create this variable for you, so there is no need to explictly declare this variable in the `variables` section.\n",
      "bindTo": "Variable"
    },
    "input": {
      "type": "boolean",
      "node": "scalar",
      "default": true,
      "tooltip": "Boolean flag to indicate this is an `input` binding which means the OMT Component will receive values through this binding\nand write those to the associated ODT variable. But when the ODT variable changes its value it will not be written back to\nthe binding and thus the owner of this component. By default this flag is `true`.",
      "description": "boolean"
    },
    "output": {
      "type": "boolean",
      "node": "scalar",
      "default": false,
      "tooltip": "Boolean flag to indicate this is an `output` binding which means that when the ODT variable for this binding changes its value,\nthe OMT component will write that value back to the owner of this component. By default this flag is `false` to prevent\naccidental changes in the data of the owner.",
      "description": "boolean"
    },
    "onChange": {
      "node": "scalar",
      "tooltip": "An ODT script that gets executed each time the ODT variable for this binding returns a different value. This means the binding\nis going to 'listen' for changes in that variable. It does a shallow compare and does not check for changes within the objects.\nFor example, when the variable is the iri for an employee, the onChange will be invoked when the variable is changed to a\ndifferent iri, but it will not fire when the name of one of the employees changes.\n\nThe `onChange` hook is typically used to detect when the owner of the component changes an input value and this component should\nreact to that.\n\nThe onChange script is executed with two additional variables: $oldValue and $newValue. Those contain the previous and the\ncurrent value of the ODT variable.",
      "description": "ODT script",
      "script": true
    }
  }
}
