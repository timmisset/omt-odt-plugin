plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.3.0'
    id 'jacoco'
}

intellij {
    version = '2021.3'
    type = 'IU'
    plugins = [
            'java',
            'JavaScriptLanguage',
            'AngularJS',
            'org.jetbrains.plugins.yaml'
    ]
}

group 'com.misset'
version '5.5.1'

sourceCompatibility = 11
sourceSets.main.java.srcDirs 'src/main/gen'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.4.6'
    implementation group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.2.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
    implementation group: 'org.apache.jena', name: 'jena', version: '3.17.0', ext: 'pom' exclude group: 'org.slf4j'
    implementation group: 'org.apache.jena', name: 'jena-core', version: '3.17.0' exclude group: 'org.slf4j'
}
test {
    useJUnitPlatform {

    }
    systemProperty "idea.home.path", "C:/Program Files/JetBrains/IntelliJ IDEA 2021.3"
}
jacocoTestReport {
    // due to the unpredictability of the IntelliJ Platform, unit tests should not be considered part of the coverage
    // only the fixture tests should be used as advised by the JetBrains
    dependsOn test // tests are required to run before generating the report

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/gen/**')
        }))
    }
}
buildSearchableOptions.enabled = false
// See https://github.com/JetBrains/gradle-intellij-plugin/

patchPluginXml {
    sinceBuild = '212'

    changeNotes = """
        <h1>Update 5.6</h1>
        Fixed #26: <a href="https://github.com/timmisset/omt-odt-plugin/issues/26">No error or quickfix when using an undefined prefix in a javadoc parameter annotation</a>
        Added #38: <a href="https://github.com/timmisset/omt-odt-plugin/issues/38">Improve completion suggestion for equation statement</a><br>
        Completion for equation statements will take the left-side query into consideration and provide suggestions based on the instance or class<br>
        For example<br>
        \$variableWithTypeClassA / rdf:type == <caret> will suggest /ont:ClassA and all subclasses for ClassA.<br>
        \$variableWithTypeClassA == <caret> will suggest all possible instances for ClassA.<br>
        <br>
        Added #42: <a href="https://github.com/timmisset/omt-odt-plugin/issues/42">Boolean validation for query filter</a><br>
        Added #43: <a href="https://github.com/timmisset/omt-odt-plugin/issues/43">Paired matcher for brackets and parentheses</a><br>
        Fixed #44: <a href="https://github.com/timmisset/omt-odt-plugin/issues/44">Refactor-rename prefix in annotation and usage</a>
        Added #45: <a href="https://github.com/timmisset/omt-odt-plugin/issues/45">PostStartup Indexing</a><br>
        Indexing of all OMT and injected ODT files now happens post startup in a non-ui-blocking thread.<br>
        The regular indexer of IntelliJ cannot be used (see issue) for injected languages which is why a seperate mechanism is required.<br>
        You will see a progress indicator showing 'Indexing OMT' which will take about 10-15 seconds.<br>
        
        <h1>Update 5.5</h1>
        Added #36: <a href="https://github.com/timmisset/omt-odt-plugin/issues/36">DocumentationProvider for OMT</a><br>
        The DocumentationProvider (hover-mouse or View - Quick Documentation) includes the OMT API markdown information<br>
        The documentation consists of classes and attributes, if classes are available, they are displayed, otherwise the attribute
        documentation. For example, when hovering the payload: key in an Activity, it will show the information for the PayloadProperty class<br>
        <br>
        The location of the API.md is currently not configurable, the API.md must be located in a folder named 'omt'.<br>
        <br>
        Added #39: <a href="https://github.com/timmisset/omt-odt-plugin/issues/39">Add ForbiddenPredicates to OMT Structure</a><br>
        !ForbiddenPredicates has been added as a MergeHandler type that can be used in any part of the OMT structure that
        allows for handlers: (!Activity, !GraphShapeHandlers)<br>
        <br>
        Added #40: <a href="https://github.com/timmisset/omt-odt-plugin/issues/40">Add GraphShapeHandlers to OMT structure</a><br>
        !GraphShapeHandlers are added to the OMT structure. The handlers defined in a module reference to the declared or imported
        GraphShapeHandlers; this will allow for refactor-rename handling. The 'shape:' attribute allows for GraphShape URIs only, 
        completion will show all known shapes in the model.<br>
        <br>
        Fixed #34: <a href="https://github.com/timmisset/omt-odt-plugin/issues/34">interface member not exported correctly</a><br>
        Fixed #35: <a href="https://github.com/timmisset/omt-odt-plugin/issues/35">Refactor unresolvable from annotation to inspection</a><br>
        Fixed #41: <a href="https://github.com/timmisset/omt-odt-plugin/issues/41">Refactor-rename export member</a><br>
        """
}
tasks {
    runIde {
        jvmArgs("-Xmx2000m")
    }
    runPluginVerifier {
        ideVersions = ["IC-2021.2", "IC-2021.3"]
    }


}
publishPlugin {
    token = System.getenv().getOrDefault("ORG_GRADLE_PROJECT_intellijPublishToken", "")
}
