plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.3.0'
    id 'jacoco'
}

intellij {
    version = '2021.3'
    type = 'IU'
    plugins = [
            'java',
            'JavaScriptLanguage',
            'AngularJS',
            'org.jetbrains.plugins.yaml'
    ]
}

group 'com.misset'
version '5.1'

sourceCompatibility = 11
sourceSets.main.java.srcDirs 'src/main/gen'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.4.6'
    implementation group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.2.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
    implementation group: 'org.apache.jena', name: 'jena', version: '3.17.0', ext: 'pom' exclude group: 'org.slf4j'
    implementation group: 'org.apache.jena', name: 'jena-core', version: '3.17.0' exclude group: 'org.slf4j'
}
test {
    useJUnitPlatform {

    }
    systemProperty "idea.home.path", "C:/Program Files/JetBrains/IntelliJ IDEA 2021.3"
}
jacocoTestReport {
    // due to the unpredictability of the IntelliJ Platform, unit tests should not be considered part of the coverage
    // only the fixture tests should be used as advised by the JetBrains
    dependsOn test // tests are required to run before generating the report

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/gen/**')
        }))
    }
}
buildSearchableOptions.enabled = false
// See https://github.com/JetBrains/gradle-intellij-plugin/

patchPluginXml {
    sinceBuild = '212'

    changeNotes = """
        <h1>Update 5.1</h1>
        Added the 'Introduce local variable' intention</br>
        Added 'Safe Delete' (part of refactoring) and 'Remove' quickfix for:</br>
        <ul>
            <li>OMT Variables</li>
            <li>OMT Input parameters</li>
            <li>OMT Base parameters</li>
            <li>OMT ModelItems</li>
            <li>OMT Prefix declarations</li>
            <li>OMT Import members</li>
            <li>ODT Variable declarations</li>
            <li>ODT Input parameters</li>
            <li>ODT Define Statements</li>
        </ul>
        
        Resolves DEFINE COMMAND callables by resolving all possible RETURN statements</br>
        Fixed: Insert ODT DEFINE QUERY / COMMAND statement with proper indentation</br>
        Fixed: owl:Class resolves correctly to any Class, not instances of owl:Class</br>
        
        <h1>OMT / ODT plugin 5.0</h1>
        Completely re-written OMT / ODT plugin</br>
        It is now fully backed by the native IntelliJ YAML plugin for the OMT/YAML Structure</br>
        All ODT fragments are injected as code snippets. This makes it a bit slower but much more stable.</br>
        </br>
        <a href="https://github.com/timmisset/omt-odt-plugin/blob/master/README.md">It is strongly advised to read the documentation</a>
        <h2>New features</h2>
        Aside from the refactoring, some new features were also introduced
        <h2>ODT</h2>
        <ul>
        <li>ODT files can be processed stand-alone</li>
        <li>Syntax highlighting by resolved type</li>
        <li>Reasoning now includes NamedGraphs and GraphShapes</li>
        <li>Validation includes minCount and maxCount as specified in the model</li>
        </ul>
        <h2>OMT</h2>
        <ul>
        <li>Added support for declared imports (module:import)</li>
        <li>The mapping structure of project domains is configurable</li>
        </ul>
        
        </br>
        Since the plugin was basically recreated from scratch, there migt be some features missing or not working
        anymore, please report them at github.</br>

        <h2>Removed features</h2>
        Some features were not working correctly in the old version and have been removed. These might be re-introduced in the future upon demand.
        <ul>
        <li>Refactor-rename from the TTL model to the OMT / ODT usage. This was not used and required heavy re-index when the model was updated.</li>
        <li>Introduce local variable. Action was not triggered properly, will return in the future.</li>
        </ul>
      """
}
tasks {
    runIde {
        jvmArgs("-Xmx2000m")
    }
    runPluginVerifier {
        ideVersions = ["IC-2021.1", "IC-2021.2"]
    }


}
publishPlugin {
    token = System.getenv().getOrDefault("ORG_GRADLE_PROJECT_intellijPublishToken", "")
}
