plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.5.3'
    id 'jacoco'
}

intellij {
    version = '2022.1'
    type = 'IU'
    plugins = [
            'java',
            'JavaScriptLanguage',
            'AngularJS',
            'org.jetbrains.plugins.yaml'
    ]
}

group 'com.misset'
version '5.12'

sourceCompatibility = 11
sourceSets.main.java.srcDirs 'src/main/gen'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.7.7'
    implementation group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.2.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
    implementation group: 'org.apache.jena', name: 'jena', version: '3.17.0', ext: 'pom' exclude group: 'org.slf4j'
    implementation group: 'org.apache.jena', name: 'jena-core', version: '3.17.0' exclude group: 'org.slf4j'
}
test {
    useJUnitPlatform {

    }
    systemProperty "idea.home.path", "C:/Program Files/JetBrains/IntelliJ IDEA 2022.1"
}
jacocoTestReport {
    // due to the unpredictability of the IntelliJ Platform, unit tests should not be considered part of the coverage
    // only the fixture tests should be used as advised by the JetBrains
    dependsOn test // tests are required to run before generating the report

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/gen/**')
        }))
    }
}
buildSearchableOptions.enabled = false
// See https://github.com/JetBrains/gradle-intellij-plugin/

patchPluginXml {
    sinceBuild = '212'

    changeNotes = """
        <h1>Update 5.13</h1>
        Added #69: <a href=""></a><br>
        For queries that expect/require a boolean result, the completion results are now filtered to only show applicable
        queries, variables and fixed values true / false.<br>
        An example of this is the payload/[item]/strict property in an OMT Activity.<br>
        Since all boolean based OMT properties use the same way to interact with the injected ODT fragments, it should be applied to all
        locations in the OMT model.<br>
        <br>
        Added #70: <a href="https://github.com/timmisset/omt-odt-plugin/issues/70">Align completions presentation</a><br>
        Based on the presentation of completions in IntelliJ, the implementation for OMT/ODT completions are aligned.
        The completion consist of a value, tail and type. The value can be the name of the method, or the predicate IRI. The tail
        contains some more specifics, such as parameters, the traverse direction (forward/reverse) etc. The type now always contains
        the return or current type (for variables).<br>
        """
}
tasks {
    runIde {
        jvmArgs("-Xmx2000m")
    }
    runPluginVerifier {
        ideVersions = ["IC-2021.2", "IC-2021.3", "IC-2022.1"]
    }


}
publishPlugin {
    token = System.getenv().getOrDefault("ORG_GRADLE_PROJECT_intellijPublishToken", "")
}
