plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.3.0'
    id 'jacoco'
}

intellij {
    version = '2021.3'
    type = 'IU'
    plugins = [
            'java',
            'JavaScriptLanguage',
            'AngularJS',
            'org.jetbrains.plugins.yaml'
    ]
}

group 'com.misset'
version '5.7'

sourceCompatibility = 11
sourceSets.main.java.srcDirs 'src/main/gen'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.4.6'
    implementation group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.2.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
    implementation group: 'org.apache.jena', name: 'jena', version: '3.17.0', ext: 'pom' exclude group: 'org.slf4j'
    implementation group: 'org.apache.jena', name: 'jena-core', version: '3.17.0' exclude group: 'org.slf4j'
}
test {
    useJUnitPlatform {

    }
    systemProperty "idea.home.path", "C:/Program Files/JetBrains/IntelliJ IDEA 2021.3"
}
jacocoTestReport {
    // due to the unpredictability of the IntelliJ Platform, unit tests should not be considered part of the coverage
    // only the fixture tests should be used as advised by the JetBrains
    dependsOn test // tests are required to run before generating the report

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/gen/**')
        }))
    }
}
buildSearchableOptions.enabled = false
// See https://github.com/JetBrains/gradle-intellij-plugin/

patchPluginXml {
    sinceBuild = '212'

    changeNotes = """
        <h1>Update 5.7</h1>
        <h2>Introduce local variable</h2>
        Added #46: <a href="https://github.com/timmisset/omt-odt-plugin/issues/46">Introduce local variable with refactoring</a><br>
        Introducing a local variable for an ODT statement now contains finding matching statements to also be replaced within
        the scope of the newly created variable.<br>
        Just as with the native Introduce methods for Java, you can choose to replace only the current or all occurrences.<br>
        Triggering the Introduce intention only works from a statement but it will look for the same pattern in other elements<br>
        <br>
        For example:<br>
        some / path / to / a / property; <-- introduce here<br>
        IF some / path / to / a / property { <-- replaced<br>
            @LOG(some / path / to / a / property); <-- replaced<br>
        }<br>
        <br>
        The introducer will use the resolved type of the statement and (if applicable) the callname to create a list of suggested names
        for the new variable to choose from. It will use super-class suggestions. If a statement can resolve to multiple types, all types
        and their superclasses are included<br>
        <h2>Optimize imports</h2>
        Added #47: <a href="https://github.com/timmisset/omt-odt-plugin/issues/47">Optimize imports</a><br>
        Optimize imports is available for OMT files. It is integrated in the native flow of IntelliJ i.e.:<br>
        <ul>
            <li>Statically available via Code -> Optimize imports / Ctrl + Alt + O</li>
            <li>Dynamically available via QuickFix</li>
            <li>If enabled, it runs on save. Setting available at File | Settings | Tools | Actions on Save</li>
        </ul>
        """
}
tasks {
    runIde {
        jvmArgs("-Xmx2000m")
    }
    runPluginVerifier {
        ideVersions = ["IC-2021.2", "IC-2021.3"]
    }


}
publishPlugin {
    token = System.getenv().getOrDefault("ORG_GRADLE_PROJECT_intellijPublishToken", "")
}
